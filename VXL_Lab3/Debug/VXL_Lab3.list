
VXL_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e30  08002e30  00012e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e54  08002e54  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002e54  08002e54  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e54  08002e54  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e54  08002e54  00012e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e58  08002e58  00012e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000090  08002eec  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002eec  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a12d  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c69  00000000  00000000  0002a1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002be50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002c8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171b0  00000000  00000000  0002d280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e258  00000000  00000000  00044430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082751  00000000  00000000  00052688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4dd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002974  00000000  00000000  000d4e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e18 	.word	0x08002e18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08002e18 	.word	0x08002e18

0800014c <isButton1Pressed>:

int TimerForKeyPress1=200;
int TimerForKeyPress2=200;
int TimerForKeyPress3=200;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag==1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag=0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000b4 	.word	0x200000b4

08000170 <isButton2Pressed>:
int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (button2_flag==1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag=0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000b8 	.word	0x200000b8

08000194 <isButton3Pressed>:
int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if (button3_flag==1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag=0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000bc 	.word	0x200000bc

080001b8 <getKeyInput1>:
void getKeyInput1(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	KeyReg0_1=KeyReg1_1;
 80001bc:	4b1f      	ldr	r3, [pc, #124]	; (800023c <getKeyInput1+0x84>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a1f      	ldr	r2, [pc, #124]	; (8000240 <getKeyInput1+0x88>)
 80001c2:	6013      	str	r3, [r2, #0]
	KeyReg1_1=KeyReg2_1;
 80001c4:	4b1f      	ldr	r3, [pc, #124]	; (8000244 <getKeyInput1+0x8c>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a1c      	ldr	r2, [pc, #112]	; (800023c <getKeyInput1+0x84>)
 80001ca:	6013      	str	r3, [r2, #0]
	KeyReg2_1=HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d0:	481d      	ldr	r0, [pc, #116]	; (8000248 <getKeyInput1+0x90>)
 80001d2:	f001 fdf5 	bl	8001dc0 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b1a      	ldr	r3, [pc, #104]	; (8000244 <getKeyInput1+0x8c>)
 80001dc:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_1==KeyReg1_1) && (KeyReg1_1==KeyReg2_1)){
 80001de:	4b18      	ldr	r3, [pc, #96]	; (8000240 <getKeyInput1+0x88>)
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	4b16      	ldr	r3, [pc, #88]	; (800023c <getKeyInput1+0x84>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d125      	bne.n	8000236 <getKeyInput1+0x7e>
 80001ea:	4b14      	ldr	r3, [pc, #80]	; (800023c <getKeyInput1+0x84>)
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	4b15      	ldr	r3, [pc, #84]	; (8000244 <getKeyInput1+0x8c>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d11f      	bne.n	8000236 <getKeyInput1+0x7e>
		if (KeyReg3_1!=KeyReg2_1){
 80001f6:	4b15      	ldr	r3, [pc, #84]	; (800024c <getKeyInput1+0x94>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	4b12      	ldr	r3, [pc, #72]	; (8000244 <getKeyInput1+0x8c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d00d      	beq.n	800021e <getKeyInput1+0x66>
			KeyReg3_1=KeyReg2_1;
 8000202:	4b10      	ldr	r3, [pc, #64]	; (8000244 <getKeyInput1+0x8c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a11      	ldr	r2, [pc, #68]	; (800024c <getKeyInput1+0x94>)
 8000208:	6013      	str	r3, [r2, #0]
			if (KeyReg2_1==PRESSED_STATE){
 800020a:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <getKeyInput1+0x8c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d111      	bne.n	8000236 <getKeyInput1+0x7e>
				subKeyProcess1();
 8000212:	f000 f8bb 	bl	800038c <subKeyProcess1>
				TimerForKeyPress1=200;
 8000216:	4b0e      	ldr	r3, [pc, #56]	; (8000250 <getKeyInput1+0x98>)
 8000218:	22c8      	movs	r2, #200	; 0xc8
 800021a:	601a      	str	r2, [r3, #0]
			if (TimerForKeyPress1<= 0 ){
				KeyReg3_1=NORMAL_STATE;
			}
		}
	}
}
 800021c:	e00b      	b.n	8000236 <getKeyInput1+0x7e>
			TimerForKeyPress1--;
 800021e:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <getKeyInput1+0x98>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	3b01      	subs	r3, #1
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <getKeyInput1+0x98>)
 8000226:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress1<= 0 ){
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <getKeyInput1+0x98>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	dc02      	bgt.n	8000236 <getKeyInput1+0x7e>
				KeyReg3_1=NORMAL_STATE;
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <getKeyInput1+0x94>)
 8000232:	2201      	movs	r2, #1
 8000234:	601a      	str	r2, [r3, #0]
}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000004 	.word	0x20000004
 8000240:	20000000 	.word	0x20000000
 8000244:	20000008 	.word	0x20000008
 8000248:	40011000 	.word	0x40011000
 800024c:	2000000c 	.word	0x2000000c
 8000250:	20000030 	.word	0x20000030

08000254 <getKeyInput2>:

void getKeyInput2(){
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	KeyReg0_2=KeyReg1_2;
 8000258:	4b1f      	ldr	r3, [pc, #124]	; (80002d8 <getKeyInput2+0x84>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a1f      	ldr	r2, [pc, #124]	; (80002dc <getKeyInput2+0x88>)
 800025e:	6013      	str	r3, [r2, #0]
	KeyReg1_2=KeyReg2_2;
 8000260:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <getKeyInput2+0x8c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a1c      	ldr	r2, [pc, #112]	; (80002d8 <getKeyInput2+0x84>)
 8000266:	6013      	str	r3, [r2, #0]
	KeyReg2_2=HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000268:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800026c:	481d      	ldr	r0, [pc, #116]	; (80002e4 <getKeyInput2+0x90>)
 800026e:	f001 fda7 	bl	8001dc0 <HAL_GPIO_ReadPin>
 8000272:	4603      	mov	r3, r0
 8000274:	461a      	mov	r2, r3
 8000276:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <getKeyInput2+0x8c>)
 8000278:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_2==KeyReg1_2) && (KeyReg1_2==KeyReg2_2)){
 800027a:	4b18      	ldr	r3, [pc, #96]	; (80002dc <getKeyInput2+0x88>)
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <getKeyInput2+0x84>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	429a      	cmp	r2, r3
 8000284:	d125      	bne.n	80002d2 <getKeyInput2+0x7e>
 8000286:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <getKeyInput2+0x84>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <getKeyInput2+0x8c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	429a      	cmp	r2, r3
 8000290:	d11f      	bne.n	80002d2 <getKeyInput2+0x7e>
		if (KeyReg3_2!=KeyReg2_2){
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <getKeyInput2+0x94>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <getKeyInput2+0x8c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	429a      	cmp	r2, r3
 800029c:	d00d      	beq.n	80002ba <getKeyInput2+0x66>
			KeyReg3_2=KeyReg2_2;
 800029e:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <getKeyInput2+0x8c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <getKeyInput2+0x94>)
 80002a4:	6013      	str	r3, [r2, #0]
			if (KeyReg2_2==PRESSED_STATE){
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <getKeyInput2+0x8c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d111      	bne.n	80002d2 <getKeyInput2+0x7e>
				subKeyProcess2();
 80002ae:	f000 f879 	bl	80003a4 <subKeyProcess2>
				TimerForKeyPress2=200;
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <getKeyInput2+0x98>)
 80002b4:	22c8      	movs	r2, #200	; 0xc8
 80002b6:	601a      	str	r2, [r3, #0]
			if (TimerForKeyPress2 <= 0 ){
				KeyReg3_2 =NORMAL_STATE;
			}
		}
	}
}
 80002b8:	e00b      	b.n	80002d2 <getKeyInput2+0x7e>
			TimerForKeyPress2--;
 80002ba:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <getKeyInput2+0x98>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	3b01      	subs	r3, #1
 80002c0:	4a0a      	ldr	r2, [pc, #40]	; (80002ec <getKeyInput2+0x98>)
 80002c2:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress2 <= 0 ){
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <getKeyInput2+0x98>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	dc02      	bgt.n	80002d2 <getKeyInput2+0x7e>
				KeyReg3_2 =NORMAL_STATE;
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <getKeyInput2+0x94>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	601a      	str	r2, [r3, #0]
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20000014 	.word	0x20000014
 80002dc:	20000010 	.word	0x20000010
 80002e0:	20000018 	.word	0x20000018
 80002e4:	40011000 	.word	0x40011000
 80002e8:	2000001c 	.word	0x2000001c
 80002ec:	20000034 	.word	0x20000034

080002f0 <getKeyInput3>:

void getKeyInput3(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	KeyReg0_3=KeyReg1_3;
 80002f4:	4b1f      	ldr	r3, [pc, #124]	; (8000374 <getKeyInput3+0x84>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a1f      	ldr	r2, [pc, #124]	; (8000378 <getKeyInput3+0x88>)
 80002fa:	6013      	str	r3, [r2, #0]
	KeyReg1_3=KeyReg2_3;
 80002fc:	4b1f      	ldr	r3, [pc, #124]	; (800037c <getKeyInput3+0x8c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a1c      	ldr	r2, [pc, #112]	; (8000374 <getKeyInput3+0x84>)
 8000302:	6013      	str	r3, [r2, #0]
	KeyReg2_3=HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000304:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000308:	481d      	ldr	r0, [pc, #116]	; (8000380 <getKeyInput3+0x90>)
 800030a:	f001 fd59 	bl	8001dc0 <HAL_GPIO_ReadPin>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	4b1a      	ldr	r3, [pc, #104]	; (800037c <getKeyInput3+0x8c>)
 8000314:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_3==KeyReg1_3) && (KeyReg1_3==KeyReg2_3)){
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <getKeyInput3+0x88>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	4b16      	ldr	r3, [pc, #88]	; (8000374 <getKeyInput3+0x84>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	429a      	cmp	r2, r3
 8000320:	d125      	bne.n	800036e <getKeyInput3+0x7e>
 8000322:	4b14      	ldr	r3, [pc, #80]	; (8000374 <getKeyInput3+0x84>)
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	4b15      	ldr	r3, [pc, #84]	; (800037c <getKeyInput3+0x8c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	429a      	cmp	r2, r3
 800032c:	d11f      	bne.n	800036e <getKeyInput3+0x7e>
		if (KeyReg3_3!=KeyReg2_3){
 800032e:	4b15      	ldr	r3, [pc, #84]	; (8000384 <getKeyInput3+0x94>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	4b12      	ldr	r3, [pc, #72]	; (800037c <getKeyInput3+0x8c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	429a      	cmp	r2, r3
 8000338:	d00d      	beq.n	8000356 <getKeyInput3+0x66>
			KeyReg3_3=KeyReg2_3;
 800033a:	4b10      	ldr	r3, [pc, #64]	; (800037c <getKeyInput3+0x8c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a11      	ldr	r2, [pc, #68]	; (8000384 <getKeyInput3+0x94>)
 8000340:	6013      	str	r3, [r2, #0]
			if (KeyReg2_3==PRESSED_STATE){
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <getKeyInput3+0x8c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d111      	bne.n	800036e <getKeyInput3+0x7e>
				subKeyProcess3();
 800034a:	f000 f837 	bl	80003bc <subKeyProcess3>
				TimerForKeyPress3=200;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <getKeyInput3+0x98>)
 8000350:	22c8      	movs	r2, #200	; 0xc8
 8000352:	601a      	str	r2, [r3, #0]
			if (TimerForKeyPress3<= 0 ){
				KeyReg3_3=NORMAL_STATE;
			}
		}
	}
}
 8000354:	e00b      	b.n	800036e <getKeyInput3+0x7e>
			TimerForKeyPress3--;
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <getKeyInput3+0x98>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	3b01      	subs	r3, #1
 800035c:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <getKeyInput3+0x98>)
 800035e:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress3<= 0 ){
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <getKeyInput3+0x98>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	dc02      	bgt.n	800036e <getKeyInput3+0x7e>
				KeyReg3_3=NORMAL_STATE;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <getKeyInput3+0x94>)
 800036a:	2201      	movs	r2, #1
 800036c:	601a      	str	r2, [r3, #0]
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000024 	.word	0x20000024
 8000378:	20000020 	.word	0x20000020
 800037c:	20000028 	.word	0x20000028
 8000380:	40011000 	.word	0x40011000
 8000384:	2000002c 	.word	0x2000002c
 8000388:	20000038 	.word	0x20000038

0800038c <subKeyProcess1>:


void subKeyProcess1(){
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
	button1_flag=1;
 8000390:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <subKeyProcess1+0x14>)
 8000392:	2201      	movs	r2, #1
 8000394:	601a      	str	r2, [r3, #0]
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	200000b4 	.word	0x200000b4

080003a4 <subKeyProcess2>:
void subKeyProcess2(){
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
	button2_flag=1;
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <subKeyProcess2+0x14>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	601a      	str	r2, [r3, #0]
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	200000b8 	.word	0x200000b8

080003bc <subKeyProcess3>:
void subKeyProcess3(){
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
	button3_flag=1;
 80003c0:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <subKeyProcess3+0x14>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	601a      	str	r2, [r3, #0]
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	200000bc 	.word	0x200000bc

080003d4 <fsm_automatic>:
//			break;
//	}
//	updateClockBuffer();
//}

void fsm_automatic() {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

	if (global_status == AUTOMATIC){
 80003d8:	4b6b      	ldr	r3, [pc, #428]	; (8000588 <fsm_automatic+0x1b4>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b18      	cmp	r3, #24
 80003de:	f040 80d0 	bne.w	8000582 <fsm_automatic+0x1ae>
//		if (isButton1Pressed()==1){
//			global_status=RED_MAN;
//		}
		switch (auto_state) {
 80003e2:	4b6a      	ldr	r3, [pc, #424]	; (800058c <fsm_automatic+0x1b8>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	3b13      	subs	r3, #19
 80003e8:	2b04      	cmp	r3, #4
 80003ea:	f200 80a2 	bhi.w	8000532 <fsm_automatic+0x15e>
 80003ee:	a201      	add	r2, pc, #4	; (adr r2, 80003f4 <fsm_automatic+0x20>)
 80003f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f4:	08000409 	.word	0x08000409
 80003f8:	08000427 	.word	0x08000427
 80003fc:	08000469 	.word	0x08000469
 8000400:	080004b9 	.word	0x080004b9
 8000404:	080004f9 	.word	0x080004f9
			case IDLE:
				time1=redTime1;
 8000408:	4b61      	ldr	r3, [pc, #388]	; (8000590 <fsm_automatic+0x1bc>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a61      	ldr	r2, [pc, #388]	; (8000594 <fsm_automatic+0x1c0>)
 800040e:	6013      	str	r3, [r2, #0]
				time2=greenTime2;
 8000410:	4b61      	ldr	r3, [pc, #388]	; (8000598 <fsm_automatic+0x1c4>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a61      	ldr	r2, [pc, #388]	; (800059c <fsm_automatic+0x1c8>)
 8000416:	6013      	str	r3, [r2, #0]
				auto_state=RED_GREEN;
 8000418:	4b5c      	ldr	r3, [pc, #368]	; (800058c <fsm_automatic+0x1b8>)
 800041a:	2214      	movs	r2, #20
 800041c:	601a      	str	r2, [r3, #0]
				traffic_light(RED_GREEN);
 800041e:	2014      	movs	r0, #20
 8000420:	f001 f8d2 	bl	80015c8 <traffic_light>
				break;
 8000424:	e08e      	b.n	8000544 <fsm_automatic+0x170>
			case RED_GREEN:
				if (timer1_flag==1){
 8000426:	4b5e      	ldr	r3, [pc, #376]	; (80005a0 <fsm_automatic+0x1cc>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	f040 8083 	bne.w	8000536 <fsm_automatic+0x162>
					setTimer1(100);
 8000430:	2064      	movs	r0, #100	; 0x64
 8000432:	f000 ffb1 	bl	8001398 <setTimer1>
					if (time2<=0){
 8000436:	4b59      	ldr	r3, [pc, #356]	; (800059c <fsm_automatic+0x1c8>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	dc09      	bgt.n	8000452 <fsm_automatic+0x7e>
						time2=yellowTime2;
 800043e:	4b59      	ldr	r3, [pc, #356]	; (80005a4 <fsm_automatic+0x1d0>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a56      	ldr	r2, [pc, #344]	; (800059c <fsm_automatic+0x1c8>)
 8000444:	6013      	str	r3, [r2, #0]
						auto_state=RED_YELLOW;
 8000446:	4b51      	ldr	r3, [pc, #324]	; (800058c <fsm_automatic+0x1b8>)
 8000448:	2215      	movs	r2, #21
 800044a:	601a      	str	r2, [r3, #0]
						traffic_light(RED_YELLOW);
 800044c:	2015      	movs	r0, #21
 800044e:	f001 f8bb 	bl	80015c8 <traffic_light>
					}
					time1--;
 8000452:	4b50      	ldr	r3, [pc, #320]	; (8000594 <fsm_automatic+0x1c0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	3b01      	subs	r3, #1
 8000458:	4a4e      	ldr	r2, [pc, #312]	; (8000594 <fsm_automatic+0x1c0>)
 800045a:	6013      	str	r3, [r2, #0]
					time2--;
 800045c:	4b4f      	ldr	r3, [pc, #316]	; (800059c <fsm_automatic+0x1c8>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	3b01      	subs	r3, #1
 8000462:	4a4e      	ldr	r2, [pc, #312]	; (800059c <fsm_automatic+0x1c8>)
 8000464:	6013      	str	r3, [r2, #0]
				}
				break;
 8000466:	e066      	b.n	8000536 <fsm_automatic+0x162>
			case RED_YELLOW:
				if (timer1_flag==1){
 8000468:	4b4d      	ldr	r3, [pc, #308]	; (80005a0 <fsm_automatic+0x1cc>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d164      	bne.n	800053a <fsm_automatic+0x166>
					setTimer1(100);
 8000470:	2064      	movs	r0, #100	; 0x64
 8000472:	f000 ff91 	bl	8001398 <setTimer1>
					if (time1<=0 && time2<=0){
 8000476:	4b47      	ldr	r3, [pc, #284]	; (8000594 <fsm_automatic+0x1c0>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	dc11      	bgt.n	80004a2 <fsm_automatic+0xce>
 800047e:	4b47      	ldr	r3, [pc, #284]	; (800059c <fsm_automatic+0x1c8>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b00      	cmp	r3, #0
 8000484:	dc0d      	bgt.n	80004a2 <fsm_automatic+0xce>
						time1=greenTime1;
 8000486:	4b48      	ldr	r3, [pc, #288]	; (80005a8 <fsm_automatic+0x1d4>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a42      	ldr	r2, [pc, #264]	; (8000594 <fsm_automatic+0x1c0>)
 800048c:	6013      	str	r3, [r2, #0]
						time2=redTime2;
 800048e:	4b47      	ldr	r3, [pc, #284]	; (80005ac <fsm_automatic+0x1d8>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a42      	ldr	r2, [pc, #264]	; (800059c <fsm_automatic+0x1c8>)
 8000494:	6013      	str	r3, [r2, #0]
						auto_state=GREEN_RED;
 8000496:	4b3d      	ldr	r3, [pc, #244]	; (800058c <fsm_automatic+0x1b8>)
 8000498:	2216      	movs	r2, #22
 800049a:	601a      	str	r2, [r3, #0]
						traffic_light(GREEN_RED);
 800049c:	2016      	movs	r0, #22
 800049e:	f001 f893 	bl	80015c8 <traffic_light>
					}
					time1--;
 80004a2:	4b3c      	ldr	r3, [pc, #240]	; (8000594 <fsm_automatic+0x1c0>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	3b01      	subs	r3, #1
 80004a8:	4a3a      	ldr	r2, [pc, #232]	; (8000594 <fsm_automatic+0x1c0>)
 80004aa:	6013      	str	r3, [r2, #0]
					time2--;
 80004ac:	4b3b      	ldr	r3, [pc, #236]	; (800059c <fsm_automatic+0x1c8>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	3b01      	subs	r3, #1
 80004b2:	4a3a      	ldr	r2, [pc, #232]	; (800059c <fsm_automatic+0x1c8>)
 80004b4:	6013      	str	r3, [r2, #0]
				}
				break;
 80004b6:	e040      	b.n	800053a <fsm_automatic+0x166>
			case GREEN_RED:
				if (timer1_flag==1){
 80004b8:	4b39      	ldr	r3, [pc, #228]	; (80005a0 <fsm_automatic+0x1cc>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d13e      	bne.n	800053e <fsm_automatic+0x16a>
					setTimer1(100);
 80004c0:	2064      	movs	r0, #100	; 0x64
 80004c2:	f000 ff69 	bl	8001398 <setTimer1>
					if (time1<=0){
 80004c6:	4b33      	ldr	r3, [pc, #204]	; (8000594 <fsm_automatic+0x1c0>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	dc09      	bgt.n	80004e2 <fsm_automatic+0x10e>
						time1=yellowTime1;
 80004ce:	4b38      	ldr	r3, [pc, #224]	; (80005b0 <fsm_automatic+0x1dc>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a30      	ldr	r2, [pc, #192]	; (8000594 <fsm_automatic+0x1c0>)
 80004d4:	6013      	str	r3, [r2, #0]
						auto_state=YELLOW_RED;
 80004d6:	4b2d      	ldr	r3, [pc, #180]	; (800058c <fsm_automatic+0x1b8>)
 80004d8:	2217      	movs	r2, #23
 80004da:	601a      	str	r2, [r3, #0]
						traffic_light(YELLOW_RED);
 80004dc:	2017      	movs	r0, #23
 80004de:	f001 f873 	bl	80015c8 <traffic_light>
					}
					time1--;
 80004e2:	4b2c      	ldr	r3, [pc, #176]	; (8000594 <fsm_automatic+0x1c0>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	4a2a      	ldr	r2, [pc, #168]	; (8000594 <fsm_automatic+0x1c0>)
 80004ea:	6013      	str	r3, [r2, #0]
					time2--;
 80004ec:	4b2b      	ldr	r3, [pc, #172]	; (800059c <fsm_automatic+0x1c8>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3b01      	subs	r3, #1
 80004f2:	4a2a      	ldr	r2, [pc, #168]	; (800059c <fsm_automatic+0x1c8>)
 80004f4:	6013      	str	r3, [r2, #0]
				}
				break;
 80004f6:	e022      	b.n	800053e <fsm_automatic+0x16a>
			case YELLOW_RED:
				if (timer1_flag==1){
 80004f8:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <fsm_automatic+0x1cc>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d120      	bne.n	8000542 <fsm_automatic+0x16e>
					setTimer1(100);
 8000500:	2064      	movs	r0, #100	; 0x64
 8000502:	f000 ff49 	bl	8001398 <setTimer1>
					if (time1<=0 && time2<=0){
 8000506:	4b23      	ldr	r3, [pc, #140]	; (8000594 <fsm_automatic+0x1c0>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	dc06      	bgt.n	800051c <fsm_automatic+0x148>
 800050e:	4b23      	ldr	r3, [pc, #140]	; (800059c <fsm_automatic+0x1c8>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	dc02      	bgt.n	800051c <fsm_automatic+0x148>
						auto_state=IDLE;
 8000516:	4b1d      	ldr	r3, [pc, #116]	; (800058c <fsm_automatic+0x1b8>)
 8000518:	2213      	movs	r2, #19
 800051a:	601a      	str	r2, [r3, #0]
					}
					time1--;
 800051c:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <fsm_automatic+0x1c0>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3b01      	subs	r3, #1
 8000522:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <fsm_automatic+0x1c0>)
 8000524:	6013      	str	r3, [r2, #0]
					time2--;
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <fsm_automatic+0x1c8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	3b01      	subs	r3, #1
 800052c:	4a1b      	ldr	r2, [pc, #108]	; (800059c <fsm_automatic+0x1c8>)
 800052e:	6013      	str	r3, [r2, #0]
				}
				break;
 8000530:	e007      	b.n	8000542 <fsm_automatic+0x16e>
			default:
				break;
 8000532:	bf00      	nop
 8000534:	e006      	b.n	8000544 <fsm_automatic+0x170>
				break;
 8000536:	bf00      	nop
 8000538:	e004      	b.n	8000544 <fsm_automatic+0x170>
				break;
 800053a:	bf00      	nop
 800053c:	e002      	b.n	8000544 <fsm_automatic+0x170>
				break;
 800053e:	bf00      	nop
 8000540:	e000      	b.n	8000544 <fsm_automatic+0x170>
				break;
 8000542:	bf00      	nop
		}
		if (timer2_flag==1){
 8000544:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <fsm_automatic+0x1e0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d118      	bne.n	800057e <fsm_automatic+0x1aa>
			setTimer2(50);
 800054c:	2032      	movs	r0, #50	; 0x32
 800054e:	f000 ff37 	bl	80013c0 <setTimer2>
			if (index_led>=2){
 8000552:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <fsm_automatic+0x1e4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b01      	cmp	r3, #1
 8000558:	dd02      	ble.n	8000560 <fsm_automatic+0x18c>
				index_led=0;
 800055a:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <fsm_automatic+0x1e4>)
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
			}
			update7SEG1(index_led);
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <fsm_automatic+0x1e4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fcc1 	bl	8000eec <update7SEG1>
			update7SEG2(index_led);
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <fsm_automatic+0x1e4>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fcf4 	bl	8000f5c <update7SEG2>
			index_led++;
 8000574:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <fsm_automatic+0x1e4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <fsm_automatic+0x1e4>)
 800057c:	6013      	str	r3, [r2, #0]
		}
		updateClockBuffer_auto();
 800057e:	f000 fd25 	bl	8000fcc <updateClockBuffer_auto>
	}
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000058 	.word	0x20000058
 800058c:	2000003c 	.word	0x2000003c
 8000590:	2000005c 	.word	0x2000005c
 8000594:	200000ac 	.word	0x200000ac
 8000598:	20000070 	.word	0x20000070
 800059c:	200000b0 	.word	0x200000b0
 80005a0:	200000c4 	.word	0x200000c4
 80005a4:	20000068 	.word	0x20000068
 80005a8:	2000006c 	.word	0x2000006c
 80005ac:	20000060 	.word	0x20000060
 80005b0:	20000064 	.word	0x20000064
 80005b4:	200000cc 	.word	0x200000cc
 80005b8:	200000c0 	.word	0x200000c0

080005bc <fsm_manual>:
int yellow_modify1=2;
int yellow_modify2=2;
int green_modify1=5;
int green_modify2=5;

void fsm_manual(){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

	switch (global_status) {
 80005c0:	4b90      	ldr	r3, [pc, #576]	; (8000804 <fsm_manual+0x248>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3b18      	subs	r3, #24
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	f200 80f1 	bhi.w	80007ae <fsm_manual+0x1f2>
 80005cc:	a201      	add	r2, pc, #4	; (adr r2, 80005d4 <fsm_manual+0x18>)
 80005ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d2:	bf00      	nop
 80005d4:	080005e5 	.word	0x080005e5
 80005d8:	08000615 	.word	0x08000615
 80005dc:	08000693 	.word	0x08000693
 80005e0:	08000733 	.word	0x08000733
		case AUTOMATIC :
			if (isButton2Pressed()==1){
 80005e4:	f7ff fdc4 	bl	8000170 <isButton2Pressed>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	f040 80e1 	bne.w	80007b2 <fsm_manual+0x1f6>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2104      	movs	r1, #4
 80005f4:	4884      	ldr	r0, [pc, #528]	; (8000808 <fsm_manual+0x24c>)
 80005f6:	f001 fbfa 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000600:	4881      	ldr	r0, [pc, #516]	; (8000808 <fsm_manual+0x24c>)
 8000602:	f001 fbf4 	bl	8001dee <HAL_GPIO_WritePin>
				auto_state=IDLE;
 8000606:	4b81      	ldr	r3, [pc, #516]	; (800080c <fsm_manual+0x250>)
 8000608:	2213      	movs	r2, #19
 800060a:	601a      	str	r2, [r3, #0]
				global_status=RED_MAN;
 800060c:	4b7d      	ldr	r3, [pc, #500]	; (8000804 <fsm_manual+0x248>)
 800060e:	2219      	movs	r2, #25
 8000610:	601a      	str	r2, [r3, #0]
			}
			break;
 8000612:	e0ce      	b.n	80007b2 <fsm_manual+0x1f6>
		case RED_MAN :
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2108      	movs	r1, #8
 8000618:	487b      	ldr	r0, [pc, #492]	; (8000808 <fsm_manual+0x24c>)
 800061a:	f001 fbe8 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000624:	4878      	ldr	r0, [pc, #480]	; (8000808 <fsm_manual+0x24c>)
 8000626:	f001 fbe2 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2110      	movs	r1, #16
 800062e:	4876      	ldr	r0, [pc, #472]	; (8000808 <fsm_manual+0x24c>)
 8000630:	f001 fbdd 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800063a:	4873      	ldr	r0, [pc, #460]	; (8000808 <fsm_manual+0x24c>)
 800063c:	f001 fbd7 	bl	8001dee <HAL_GPIO_WritePin>
			red_manual();
 8000640:	f001 f866 	bl	8001710 <red_manual>
			if (isButton2Pressed()==1){
 8000644:	f7ff fd94 	bl	8000170 <isButton2Pressed>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	d103      	bne.n	8000656 <fsm_manual+0x9a>
				global_status=YELLOW_MAN;
 800064e:	4b6d      	ldr	r3, [pc, #436]	; (8000804 <fsm_manual+0x248>)
 8000650:	221a      	movs	r2, #26
 8000652:	601a      	str	r2, [r3, #0]
				if (isButton3Pressed()==1){
					redTime1=red_modify1;
					greenTime2=green_modify2;
				}
			}
			break;
 8000654:	e0af      	b.n	80007b6 <fsm_manual+0x1fa>
				if (isButton1Pressed()==1 ){
 8000656:	f7ff fd79 	bl	800014c <isButton1Pressed>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d109      	bne.n	8000674 <fsm_manual+0xb8>
					++red_modify1;
 8000660:	4b6b      	ldr	r3, [pc, #428]	; (8000810 <fsm_manual+0x254>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	4a6a      	ldr	r2, [pc, #424]	; (8000810 <fsm_manual+0x254>)
 8000668:	6013      	str	r3, [r2, #0]
					++green_modify2;
 800066a:	4b6a      	ldr	r3, [pc, #424]	; (8000814 <fsm_manual+0x258>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	4a68      	ldr	r2, [pc, #416]	; (8000814 <fsm_manual+0x258>)
 8000672:	6013      	str	r3, [r2, #0]
				if (isButton3Pressed()==1){
 8000674:	f7ff fd8e 	bl	8000194 <isButton3Pressed>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	f040 809b 	bne.w	80007b6 <fsm_manual+0x1fa>
					redTime1=red_modify1;
 8000680:	4b63      	ldr	r3, [pc, #396]	; (8000810 <fsm_manual+0x254>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a64      	ldr	r2, [pc, #400]	; (8000818 <fsm_manual+0x25c>)
 8000686:	6013      	str	r3, [r2, #0]
					greenTime2=green_modify2;
 8000688:	4b62      	ldr	r3, [pc, #392]	; (8000814 <fsm_manual+0x258>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a63      	ldr	r2, [pc, #396]	; (800081c <fsm_manual+0x260>)
 800068e:	6013      	str	r3, [r2, #0]
			break;
 8000690:	e091      	b.n	80007b6 <fsm_manual+0x1fa>
		case YELLOW_MAN :
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2104      	movs	r1, #4
 8000696:	485c      	ldr	r0, [pc, #368]	; (8000808 <fsm_manual+0x24c>)
 8000698:	f001 fba9 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a2:	4859      	ldr	r0, [pc, #356]	; (8000808 <fsm_manual+0x24c>)
 80006a4:	f001 fba3 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2110      	movs	r1, #16
 80006ac:	4856      	ldr	r0, [pc, #344]	; (8000808 <fsm_manual+0x24c>)
 80006ae:	f001 fb9e 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b8:	4853      	ldr	r0, [pc, #332]	; (8000808 <fsm_manual+0x24c>)
 80006ba:	f001 fb98 	bl	8001dee <HAL_GPIO_WritePin>
			yellow_manual();
 80006be:	f001 f83f 	bl	8001740 <yellow_manual>
			if (isButton2Pressed()==1){
 80006c2:	f7ff fd55 	bl	8000170 <isButton2Pressed>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d103      	bne.n	80006d4 <fsm_manual+0x118>
				global_status=GREEN_MAN;
 80006cc:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <fsm_manual+0x248>)
 80006ce:	221b      	movs	r2, #27
 80006d0:	601a      	str	r2, [r3, #0]
					yellowTime2=yellow_modify2;
					redTime1=red_modify1;
					redTime2=red_modify2;
				}
			}
			break;
 80006d2:	e072      	b.n	80007ba <fsm_manual+0x1fe>
				if (isButton1Pressed()==1){
 80006d4:	f7ff fd3a 	bl	800014c <isButton1Pressed>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d113      	bne.n	8000706 <fsm_manual+0x14a>
					++yellow_modify1;
 80006de:	4b50      	ldr	r3, [pc, #320]	; (8000820 <fsm_manual+0x264>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a4e      	ldr	r2, [pc, #312]	; (8000820 <fsm_manual+0x264>)
 80006e6:	6013      	str	r3, [r2, #0]
					++yellow_modify2;
 80006e8:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <fsm_manual+0x268>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a4d      	ldr	r2, [pc, #308]	; (8000824 <fsm_manual+0x268>)
 80006f0:	6013      	str	r3, [r2, #0]
					++red_modify1;
 80006f2:	4b47      	ldr	r3, [pc, #284]	; (8000810 <fsm_manual+0x254>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	4a45      	ldr	r2, [pc, #276]	; (8000810 <fsm_manual+0x254>)
 80006fa:	6013      	str	r3, [r2, #0]
					++red_modify2;
 80006fc:	4b4a      	ldr	r3, [pc, #296]	; (8000828 <fsm_manual+0x26c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	4a49      	ldr	r2, [pc, #292]	; (8000828 <fsm_manual+0x26c>)
 8000704:	6013      	str	r3, [r2, #0]
				if (isButton3Pressed()==1){
 8000706:	f7ff fd45 	bl	8000194 <isButton3Pressed>
 800070a:	4603      	mov	r3, r0
 800070c:	2b01      	cmp	r3, #1
 800070e:	d154      	bne.n	80007ba <fsm_manual+0x1fe>
					yellowTime1=yellow_modify1;
 8000710:	4b43      	ldr	r3, [pc, #268]	; (8000820 <fsm_manual+0x264>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a45      	ldr	r2, [pc, #276]	; (800082c <fsm_manual+0x270>)
 8000716:	6013      	str	r3, [r2, #0]
					yellowTime2=yellow_modify2;
 8000718:	4b42      	ldr	r3, [pc, #264]	; (8000824 <fsm_manual+0x268>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a44      	ldr	r2, [pc, #272]	; (8000830 <fsm_manual+0x274>)
 800071e:	6013      	str	r3, [r2, #0]
					redTime1=red_modify1;
 8000720:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <fsm_manual+0x254>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a3c      	ldr	r2, [pc, #240]	; (8000818 <fsm_manual+0x25c>)
 8000726:	6013      	str	r3, [r2, #0]
					redTime2=red_modify2;
 8000728:	4b3f      	ldr	r3, [pc, #252]	; (8000828 <fsm_manual+0x26c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a41      	ldr	r2, [pc, #260]	; (8000834 <fsm_manual+0x278>)
 800072e:	6013      	str	r3, [r2, #0]
			break;
 8000730:	e043      	b.n	80007ba <fsm_manual+0x1fe>
		case GREEN_MAN :
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2108      	movs	r1, #8
 8000736:	4834      	ldr	r0, [pc, #208]	; (8000808 <fsm_manual+0x24c>)
 8000738:	f001 fb59 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000742:	4831      	ldr	r0, [pc, #196]	; (8000808 <fsm_manual+0x24c>)
 8000744:	f001 fb53 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2104      	movs	r1, #4
 800074c:	482e      	ldr	r0, [pc, #184]	; (8000808 <fsm_manual+0x24c>)
 800074e:	f001 fb4e 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000758:	482b      	ldr	r0, [pc, #172]	; (8000808 <fsm_manual+0x24c>)
 800075a:	f001 fb48 	bl	8001dee <HAL_GPIO_WritePin>
			green_manual();
 800075e:	f001 f807 	bl	8001770 <green_manual>
			if (isButton2Pressed()==1){
 8000762:	f7ff fd05 	bl	8000170 <isButton2Pressed>
 8000766:	4603      	mov	r3, r0
 8000768:	2b01      	cmp	r3, #1
 800076a:	d103      	bne.n	8000774 <fsm_manual+0x1b8>
				global_status=AUTOMATIC;
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <fsm_manual+0x248>)
 800076e:	2218      	movs	r2, #24
 8000770:	601a      	str	r2, [r3, #0]
				if (isButton3Pressed()==1){
					greenTime1=green_modify1;
					redTime2=red_modify2;
				}
			}
			break;
 8000772:	e024      	b.n	80007be <fsm_manual+0x202>
				if (isButton1Pressed()==1){
 8000774:	f7ff fcea 	bl	800014c <isButton1Pressed>
 8000778:	4603      	mov	r3, r0
 800077a:	2b01      	cmp	r3, #1
 800077c:	d109      	bne.n	8000792 <fsm_manual+0x1d6>
					++green_modify1;
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <fsm_manual+0x27c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	3301      	adds	r3, #1
 8000784:	4a2c      	ldr	r2, [pc, #176]	; (8000838 <fsm_manual+0x27c>)
 8000786:	6013      	str	r3, [r2, #0]
					++red_modify2;
 8000788:	4b27      	ldr	r3, [pc, #156]	; (8000828 <fsm_manual+0x26c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	4a26      	ldr	r2, [pc, #152]	; (8000828 <fsm_manual+0x26c>)
 8000790:	6013      	str	r3, [r2, #0]
				if (isButton3Pressed()==1){
 8000792:	f7ff fcff 	bl	8000194 <isButton3Pressed>
 8000796:	4603      	mov	r3, r0
 8000798:	2b01      	cmp	r3, #1
 800079a:	d110      	bne.n	80007be <fsm_manual+0x202>
					greenTime1=green_modify1;
 800079c:	4b26      	ldr	r3, [pc, #152]	; (8000838 <fsm_manual+0x27c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a26      	ldr	r2, [pc, #152]	; (800083c <fsm_manual+0x280>)
 80007a2:	6013      	str	r3, [r2, #0]
					redTime2=red_modify2;
 80007a4:	4b20      	ldr	r3, [pc, #128]	; (8000828 <fsm_manual+0x26c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a22      	ldr	r2, [pc, #136]	; (8000834 <fsm_manual+0x278>)
 80007aa:	6013      	str	r3, [r2, #0]
			break;
 80007ac:	e007      	b.n	80007be <fsm_manual+0x202>
		default:
			break;
 80007ae:	bf00      	nop
 80007b0:	e006      	b.n	80007c0 <fsm_manual+0x204>
			break;
 80007b2:	bf00      	nop
 80007b4:	e004      	b.n	80007c0 <fsm_manual+0x204>
			break;
 80007b6:	bf00      	nop
 80007b8:	e002      	b.n	80007c0 <fsm_manual+0x204>
			break;
 80007ba:	bf00      	nop
 80007bc:	e000      	b.n	80007c0 <fsm_manual+0x204>
			break;
 80007be:	bf00      	nop
	}

	if (timer2_flag==1){
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <fsm_manual+0x284>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d118      	bne.n	80007fa <fsm_manual+0x23e>
		setTimer2(50);
 80007c8:	2032      	movs	r0, #50	; 0x32
 80007ca:	f000 fdf9 	bl	80013c0 <setTimer2>
		if (index_led>=2){
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <fsm_manual+0x288>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	dd02      	ble.n	80007dc <fsm_manual+0x220>
			index_led=0;
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <fsm_manual+0x288>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
		}
		update7SEG1(index_led);
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <fsm_manual+0x288>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fb83 	bl	8000eec <update7SEG1>
		update7SEG2(index_led);
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <fsm_manual+0x288>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fbb6 	bl	8000f5c <update7SEG2>
		index_led++;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <fsm_manual+0x288>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3301      	adds	r3, #1
 80007f6:	4a13      	ldr	r2, [pc, #76]	; (8000844 <fsm_manual+0x288>)
 80007f8:	6013      	str	r3, [r2, #0]
	}
	updateClockBuffer_manual();
 80007fa:	f000 fc27 	bl	800104c <updateClockBuffer_manual>
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000058 	.word	0x20000058
 8000808:	40010800 	.word	0x40010800
 800080c:	2000003c 	.word	0x2000003c
 8000810:	20000040 	.word	0x20000040
 8000814:	20000054 	.word	0x20000054
 8000818:	2000005c 	.word	0x2000005c
 800081c:	20000070 	.word	0x20000070
 8000820:	20000048 	.word	0x20000048
 8000824:	2000004c 	.word	0x2000004c
 8000828:	20000044 	.word	0x20000044
 800082c:	20000064 	.word	0x20000064
 8000830:	20000068 	.word	0x20000068
 8000834:	20000060 	.word	0x20000060
 8000838:	20000050 	.word	0x20000050
 800083c:	2000006c 	.word	0x2000006c
 8000840:	200000cc 	.word	0x200000cc
 8000844:	200000c0 	.word	0x200000c0

08000848 <display7SEG1>:
 *      Author: Legion 5
 */

#include "global.h"

void display7SEG1(int num){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b09      	cmp	r3, #9
 8000854:	f200 81b2 	bhi.w	8000bbc <display7SEG1+0x374>
 8000858:	a201      	add	r2, pc, #4	; (adr r2, 8000860 <display7SEG1+0x18>)
 800085a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085e:	bf00      	nop
 8000860:	08000889 	.word	0x08000889
 8000864:	080008db 	.word	0x080008db
 8000868:	0800092d 	.word	0x0800092d
 800086c:	0800097f 	.word	0x0800097f
 8000870:	080009d1 	.word	0x080009d1
 8000874:	08000a23 	.word	0x08000a23
 8000878:	08000a75 	.word	0x08000a75
 800087c:	08000ac7 	.word	0x08000ac7
 8000880:	08000b19 	.word	0x08000b19
 8000884:	08000b6b 	.word	0x08000b6b
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2140      	movs	r1, #64	; 0x40
 800088c:	48ce      	ldr	r0, [pc, #824]	; (8000bc8 <display7SEG1+0x380>)
 800088e:	f001 faae 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	48cc      	ldr	r0, [pc, #816]	; (8000bc8 <display7SEG1+0x380>)
 8000898:	f001 faa9 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a2:	48c9      	ldr	r0, [pc, #804]	; (8000bc8 <display7SEG1+0x380>)
 80008a4:	f001 faa3 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ae:	48c6      	ldr	r0, [pc, #792]	; (8000bc8 <display7SEG1+0x380>)
 80008b0:	f001 fa9d 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ba:	48c3      	ldr	r0, [pc, #780]	; (8000bc8 <display7SEG1+0x380>)
 80008bc:	f001 fa97 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c6:	48c0      	ldr	r0, [pc, #768]	; (8000bc8 <display7SEG1+0x380>)
 80008c8:	f001 fa91 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d2:	48bd      	ldr	r0, [pc, #756]	; (8000bc8 <display7SEG1+0x380>)
 80008d4:	f001 fa8b 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 80008d8:	e171      	b.n	8000bbe <display7SEG1+0x376>
		case 1:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	48ba      	ldr	r0, [pc, #744]	; (8000bc8 <display7SEG1+0x380>)
 80008e0:	f001 fa85 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	48b7      	ldr	r0, [pc, #732]	; (8000bc8 <display7SEG1+0x380>)
 80008ea:	f001 fa80 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f4:	48b4      	ldr	r0, [pc, #720]	; (8000bc8 <display7SEG1+0x380>)
 80008f6:	f001 fa7a 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000900:	48b1      	ldr	r0, [pc, #708]	; (8000bc8 <display7SEG1+0x380>)
 8000902:	f001 fa74 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800090c:	48ae      	ldr	r0, [pc, #696]	; (8000bc8 <display7SEG1+0x380>)
 800090e:	f001 fa6e 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000912:	2201      	movs	r2, #1
 8000914:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000918:	48ab      	ldr	r0, [pc, #684]	; (8000bc8 <display7SEG1+0x380>)
 800091a:	f001 fa68 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800091e:	2201      	movs	r2, #1
 8000920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000924:	48a8      	ldr	r0, [pc, #672]	; (8000bc8 <display7SEG1+0x380>)
 8000926:	f001 fa62 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 800092a:	e148      	b.n	8000bbe <display7SEG1+0x376>
		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2140      	movs	r1, #64	; 0x40
 8000930:	48a5      	ldr	r0, [pc, #660]	; (8000bc8 <display7SEG1+0x380>)
 8000932:	f001 fa5c 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	48a3      	ldr	r0, [pc, #652]	; (8000bc8 <display7SEG1+0x380>)
 800093c:	f001 fa57 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000946:	48a0      	ldr	r0, [pc, #640]	; (8000bc8 <display7SEG1+0x380>)
 8000948:	f001 fa51 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000952:	489d      	ldr	r0, [pc, #628]	; (8000bc8 <display7SEG1+0x380>)
 8000954:	f001 fa4b 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095e:	489a      	ldr	r0, [pc, #616]	; (8000bc8 <display7SEG1+0x380>)
 8000960:	f001 fa45 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800096a:	4897      	ldr	r0, [pc, #604]	; (8000bc8 <display7SEG1+0x380>)
 800096c:	f001 fa3f 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000976:	4894      	ldr	r0, [pc, #592]	; (8000bc8 <display7SEG1+0x380>)
 8000978:	f001 fa39 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 800097c:	e11f      	b.n	8000bbe <display7SEG1+0x376>
		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2140      	movs	r1, #64	; 0x40
 8000982:	4891      	ldr	r0, [pc, #580]	; (8000bc8 <display7SEG1+0x380>)
 8000984:	f001 fa33 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	488e      	ldr	r0, [pc, #568]	; (8000bc8 <display7SEG1+0x380>)
 800098e:	f001 fa2e 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000998:	488b      	ldr	r0, [pc, #556]	; (8000bc8 <display7SEG1+0x380>)
 800099a:	f001 fa28 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a4:	4888      	ldr	r0, [pc, #544]	; (8000bc8 <display7SEG1+0x380>)
 80009a6:	f001 fa22 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b0:	4885      	ldr	r0, [pc, #532]	; (8000bc8 <display7SEG1+0x380>)
 80009b2:	f001 fa1c 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009bc:	4882      	ldr	r0, [pc, #520]	; (8000bc8 <display7SEG1+0x380>)
 80009be:	f001 fa16 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c8:	487f      	ldr	r0, [pc, #508]	; (8000bc8 <display7SEG1+0x380>)
 80009ca:	f001 fa10 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 80009ce:	e0f6      	b.n	8000bbe <display7SEG1+0x376>
		case 4:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2140      	movs	r1, #64	; 0x40
 80009d4:	487c      	ldr	r0, [pc, #496]	; (8000bc8 <display7SEG1+0x380>)
 80009d6:	f001 fa0a 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	487a      	ldr	r0, [pc, #488]	; (8000bc8 <display7SEG1+0x380>)
 80009e0:	f001 fa05 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ea:	4877      	ldr	r0, [pc, #476]	; (8000bc8 <display7SEG1+0x380>)
 80009ec:	f001 f9ff 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009f6:	4874      	ldr	r0, [pc, #464]	; (8000bc8 <display7SEG1+0x380>)
 80009f8:	f001 f9f9 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a02:	4871      	ldr	r0, [pc, #452]	; (8000bc8 <display7SEG1+0x380>)
 8000a04:	f001 f9f3 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a0e:	486e      	ldr	r0, [pc, #440]	; (8000bc8 <display7SEG1+0x380>)
 8000a10:	f001 f9ed 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a1a:	486b      	ldr	r0, [pc, #428]	; (8000bc8 <display7SEG1+0x380>)
 8000a1c:	f001 f9e7 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000a20:	e0cd      	b.n	8000bbe <display7SEG1+0x376>
		case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2140      	movs	r1, #64	; 0x40
 8000a26:	4868      	ldr	r0, [pc, #416]	; (8000bc8 <display7SEG1+0x380>)
 8000a28:	f001 f9e1 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2180      	movs	r1, #128	; 0x80
 8000a30:	4865      	ldr	r0, [pc, #404]	; (8000bc8 <display7SEG1+0x380>)
 8000a32:	f001 f9dc 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3c:	4862      	ldr	r0, [pc, #392]	; (8000bc8 <display7SEG1+0x380>)
 8000a3e:	f001 f9d6 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a48:	485f      	ldr	r0, [pc, #380]	; (8000bc8 <display7SEG1+0x380>)
 8000a4a:	f001 f9d0 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a54:	485c      	ldr	r0, [pc, #368]	; (8000bc8 <display7SEG1+0x380>)
 8000a56:	f001 f9ca 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a60:	4859      	ldr	r0, [pc, #356]	; (8000bc8 <display7SEG1+0x380>)
 8000a62:	f001 f9c4 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6c:	4856      	ldr	r0, [pc, #344]	; (8000bc8 <display7SEG1+0x380>)
 8000a6e:	f001 f9be 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000a72:	e0a4      	b.n	8000bbe <display7SEG1+0x376>
		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2140      	movs	r1, #64	; 0x40
 8000a78:	4853      	ldr	r0, [pc, #332]	; (8000bc8 <display7SEG1+0x380>)
 8000a7a:	f001 f9b8 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	4851      	ldr	r0, [pc, #324]	; (8000bc8 <display7SEG1+0x380>)
 8000a84:	f001 f9b3 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8e:	484e      	ldr	r0, [pc, #312]	; (8000bc8 <display7SEG1+0x380>)
 8000a90:	f001 f9ad 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9a:	484b      	ldr	r0, [pc, #300]	; (8000bc8 <display7SEG1+0x380>)
 8000a9c:	f001 f9a7 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa6:	4848      	ldr	r0, [pc, #288]	; (8000bc8 <display7SEG1+0x380>)
 8000aa8:	f001 f9a1 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab2:	4845      	ldr	r0, [pc, #276]	; (8000bc8 <display7SEG1+0x380>)
 8000ab4:	f001 f99b 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000abe:	4842      	ldr	r0, [pc, #264]	; (8000bc8 <display7SEG1+0x380>)
 8000ac0:	f001 f995 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000ac4:	e07b      	b.n	8000bbe <display7SEG1+0x376>
		case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	; 0x40
 8000aca:	483f      	ldr	r0, [pc, #252]	; (8000bc8 <display7SEG1+0x380>)
 8000acc:	f001 f98f 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2180      	movs	r1, #128	; 0x80
 8000ad4:	483c      	ldr	r0, [pc, #240]	; (8000bc8 <display7SEG1+0x380>)
 8000ad6:	f001 f98a 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae0:	4839      	ldr	r0, [pc, #228]	; (8000bc8 <display7SEG1+0x380>)
 8000ae2:	f001 f984 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aec:	4836      	ldr	r0, [pc, #216]	; (8000bc8 <display7SEG1+0x380>)
 8000aee:	f001 f97e 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af8:	4833      	ldr	r0, [pc, #204]	; (8000bc8 <display7SEG1+0x380>)
 8000afa:	f001 f978 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b04:	4830      	ldr	r0, [pc, #192]	; (8000bc8 <display7SEG1+0x380>)
 8000b06:	f001 f972 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b10:	482d      	ldr	r0, [pc, #180]	; (8000bc8 <display7SEG1+0x380>)
 8000b12:	f001 f96c 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000b16:	e052      	b.n	8000bbe <display7SEG1+0x376>
		case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	482a      	ldr	r0, [pc, #168]	; (8000bc8 <display7SEG1+0x380>)
 8000b1e:	f001 f966 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	4828      	ldr	r0, [pc, #160]	; (8000bc8 <display7SEG1+0x380>)
 8000b28:	f001 f961 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b32:	4825      	ldr	r0, [pc, #148]	; (8000bc8 <display7SEG1+0x380>)
 8000b34:	f001 f95b 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b3e:	4822      	ldr	r0, [pc, #136]	; (8000bc8 <display7SEG1+0x380>)
 8000b40:	f001 f955 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b4a:	481f      	ldr	r0, [pc, #124]	; (8000bc8 <display7SEG1+0x380>)
 8000b4c:	f001 f94f 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b56:	481c      	ldr	r0, [pc, #112]	; (8000bc8 <display7SEG1+0x380>)
 8000b58:	f001 f949 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b62:	4819      	ldr	r0, [pc, #100]	; (8000bc8 <display7SEG1+0x380>)
 8000b64:	f001 f943 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000b68:	e029      	b.n	8000bbe <display7SEG1+0x376>
		case 9:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2140      	movs	r1, #64	; 0x40
 8000b6e:	4816      	ldr	r0, [pc, #88]	; (8000bc8 <display7SEG1+0x380>)
 8000b70:	f001 f93d 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <display7SEG1+0x380>)
 8000b7a:	f001 f938 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b84:	4810      	ldr	r0, [pc, #64]	; (8000bc8 <display7SEG1+0x380>)
 8000b86:	f001 f932 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <display7SEG1+0x380>)
 8000b92:	f001 f92c 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9c:	480a      	ldr	r0, [pc, #40]	; (8000bc8 <display7SEG1+0x380>)
 8000b9e:	f001 f926 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba8:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <display7SEG1+0x380>)
 8000baa:	f001 f920 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <display7SEG1+0x380>)
 8000bb6:	f001 f91a 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000bba:	e000      	b.n	8000bbe <display7SEG1+0x376>
		default:
			break;
 8000bbc:	bf00      	nop
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40010800 	.word	0x40010800

08000bcc <display7SEG2>:

void display7SEG2(int num){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b09      	cmp	r3, #9
 8000bd8:	f200 8180 	bhi.w	8000edc <display7SEG2+0x310>
 8000bdc:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <display7SEG2+0x18>)
 8000bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be2:	bf00      	nop
 8000be4:	08000c0d 	.word	0x08000c0d
 8000be8:	08000c55 	.word	0x08000c55
 8000bec:	08000c9d 	.word	0x08000c9d
 8000bf0:	08000ce5 	.word	0x08000ce5
 8000bf4:	08000d2d 	.word	0x08000d2d
 8000bf8:	08000d75 	.word	0x08000d75
 8000bfc:	08000dbd 	.word	0x08000dbd
 8000c00:	08000e05 	.word	0x08000e05
 8000c04:	08000e4d 	.word	0x08000e4d
 8000c08:	08000e95 	.word	0x08000e95
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2101      	movs	r1, #1
 8000c10:	48b5      	ldr	r0, [pc, #724]	; (8000ee8 <display7SEG2+0x31c>)
 8000c12:	f001 f8ec 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2102      	movs	r1, #2
 8000c1a:	48b3      	ldr	r0, [pc, #716]	; (8000ee8 <display7SEG2+0x31c>)
 8000c1c:	f001 f8e7 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG9_Pin, RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2104      	movs	r1, #4
 8000c24:	48b0      	ldr	r0, [pc, #704]	; (8000ee8 <display7SEG2+0x31c>)
 8000c26:	f001 f8e2 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	48ae      	ldr	r0, [pc, #696]	; (8000ee8 <display7SEG2+0x31c>)
 8000c30:	f001 f8dd 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2110      	movs	r1, #16
 8000c38:	48ab      	ldr	r0, [pc, #684]	; (8000ee8 <display7SEG2+0x31c>)
 8000c3a:	f001 f8d8 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2120      	movs	r1, #32
 8000c42:	48a9      	ldr	r0, [pc, #676]	; (8000ee8 <display7SEG2+0x31c>)
 8000c44:	f001 f8d3 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2140      	movs	r1, #64	; 0x40
 8000c4c:	48a6      	ldr	r0, [pc, #664]	; (8000ee8 <display7SEG2+0x31c>)
 8000c4e:	f001 f8ce 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000c52:	e144      	b.n	8000ede <display7SEG2+0x312>
		case 1:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2101      	movs	r1, #1
 8000c58:	48a3      	ldr	r0, [pc, #652]	; (8000ee8 <display7SEG2+0x31c>)
 8000c5a:	f001 f8c8 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2102      	movs	r1, #2
 8000c62:	48a1      	ldr	r0, [pc, #644]	; (8000ee8 <display7SEG2+0x31c>)
 8000c64:	f001 f8c3 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	489e      	ldr	r0, [pc, #632]	; (8000ee8 <display7SEG2+0x31c>)
 8000c6e:	f001 f8be 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2108      	movs	r1, #8
 8000c76:	489c      	ldr	r0, [pc, #624]	; (8000ee8 <display7SEG2+0x31c>)
 8000c78:	f001 f8b9 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4899      	ldr	r0, [pc, #612]	; (8000ee8 <display7SEG2+0x31c>)
 8000c82:	f001 f8b4 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	2120      	movs	r1, #32
 8000c8a:	4897      	ldr	r0, [pc, #604]	; (8000ee8 <display7SEG2+0x31c>)
 8000c8c:	f001 f8af 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2140      	movs	r1, #64	; 0x40
 8000c94:	4894      	ldr	r0, [pc, #592]	; (8000ee8 <display7SEG2+0x31c>)
 8000c96:	f001 f8aa 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000c9a:	e120      	b.n	8000ede <display7SEG2+0x312>
		case 2:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	4891      	ldr	r0, [pc, #580]	; (8000ee8 <display7SEG2+0x31c>)
 8000ca2:	f001 f8a4 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2102      	movs	r1, #2
 8000caa:	488f      	ldr	r0, [pc, #572]	; (8000ee8 <display7SEG2+0x31c>)
 8000cac:	f001 f89f 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2104      	movs	r1, #4
 8000cb4:	488c      	ldr	r0, [pc, #560]	; (8000ee8 <display7SEG2+0x31c>)
 8000cb6:	f001 f89a 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	488a      	ldr	r0, [pc, #552]	; (8000ee8 <display7SEG2+0x31c>)
 8000cc0:	f001 f895 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2110      	movs	r1, #16
 8000cc8:	4887      	ldr	r0, [pc, #540]	; (8000ee8 <display7SEG2+0x31c>)
 8000cca:	f001 f890 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2120      	movs	r1, #32
 8000cd2:	4885      	ldr	r0, [pc, #532]	; (8000ee8 <display7SEG2+0x31c>)
 8000cd4:	f001 f88b 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2140      	movs	r1, #64	; 0x40
 8000cdc:	4882      	ldr	r0, [pc, #520]	; (8000ee8 <display7SEG2+0x31c>)
 8000cde:	f001 f886 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000ce2:	e0fc      	b.n	8000ede <display7SEG2+0x312>
		case 3:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	487f      	ldr	r0, [pc, #508]	; (8000ee8 <display7SEG2+0x31c>)
 8000cea:	f001 f880 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG7_Pin, RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	487d      	ldr	r0, [pc, #500]	; (8000ee8 <display7SEG2+0x31c>)
 8000cf4:	f001 f87b 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	487a      	ldr	r0, [pc, #488]	; (8000ee8 <display7SEG2+0x31c>)
 8000cfe:	f001 f876 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2108      	movs	r1, #8
 8000d06:	4878      	ldr	r0, [pc, #480]	; (8000ee8 <display7SEG2+0x31c>)
 8000d08:	f001 f871 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2110      	movs	r1, #16
 8000d10:	4875      	ldr	r0, [pc, #468]	; (8000ee8 <display7SEG2+0x31c>)
 8000d12:	f001 f86c 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2120      	movs	r1, #32
 8000d1a:	4873      	ldr	r0, [pc, #460]	; (8000ee8 <display7SEG2+0x31c>)
 8000d1c:	f001 f867 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2140      	movs	r1, #64	; 0x40
 8000d24:	4870      	ldr	r0, [pc, #448]	; (8000ee8 <display7SEG2+0x31c>)
 8000d26:	f001 f862 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000d2a:	e0d8      	b.n	8000ede <display7SEG2+0x312>
		case 4:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2101      	movs	r1, #1
 8000d30:	486d      	ldr	r0, [pc, #436]	; (8000ee8 <display7SEG2+0x31c>)
 8000d32:	f001 f85c 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2102      	movs	r1, #2
 8000d3a:	486b      	ldr	r0, [pc, #428]	; (8000ee8 <display7SEG2+0x31c>)
 8000d3c:	f001 f857 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2104      	movs	r1, #4
 8000d44:	4868      	ldr	r0, [pc, #416]	; (8000ee8 <display7SEG2+0x31c>)
 8000d46:	f001 f852 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2108      	movs	r1, #8
 8000d4e:	4866      	ldr	r0, [pc, #408]	; (8000ee8 <display7SEG2+0x31c>)
 8000d50:	f001 f84d 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2110      	movs	r1, #16
 8000d58:	4863      	ldr	r0, [pc, #396]	; (8000ee8 <display7SEG2+0x31c>)
 8000d5a:	f001 f848 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2120      	movs	r1, #32
 8000d62:	4861      	ldr	r0, [pc, #388]	; (8000ee8 <display7SEG2+0x31c>)
 8000d64:	f001 f843 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	485e      	ldr	r0, [pc, #376]	; (8000ee8 <display7SEG2+0x31c>)
 8000d6e:	f001 f83e 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000d72:	e0b4      	b.n	8000ede <display7SEG2+0x312>
		case 5:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2101      	movs	r1, #1
 8000d78:	485b      	ldr	r0, [pc, #364]	; (8000ee8 <display7SEG2+0x31c>)
 8000d7a:	f001 f838 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2102      	movs	r1, #2
 8000d82:	4859      	ldr	r0, [pc, #356]	; (8000ee8 <display7SEG2+0x31c>)
 8000d84:	f001 f833 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2104      	movs	r1, #4
 8000d8c:	4856      	ldr	r0, [pc, #344]	; (8000ee8 <display7SEG2+0x31c>)
 8000d8e:	f001 f82e 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2108      	movs	r1, #8
 8000d96:	4854      	ldr	r0, [pc, #336]	; (8000ee8 <display7SEG2+0x31c>)
 8000d98:	f001 f829 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2110      	movs	r1, #16
 8000da0:	4851      	ldr	r0, [pc, #324]	; (8000ee8 <display7SEG2+0x31c>)
 8000da2:	f001 f824 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2120      	movs	r1, #32
 8000daa:	484f      	ldr	r0, [pc, #316]	; (8000ee8 <display7SEG2+0x31c>)
 8000dac:	f001 f81f 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	484c      	ldr	r0, [pc, #304]	; (8000ee8 <display7SEG2+0x31c>)
 8000db6:	f001 f81a 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000dba:	e090      	b.n	8000ede <display7SEG2+0x312>
		case 6:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	4849      	ldr	r0, [pc, #292]	; (8000ee8 <display7SEG2+0x31c>)
 8000dc2:	f001 f814 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2102      	movs	r1, #2
 8000dca:	4847      	ldr	r0, [pc, #284]	; (8000ee8 <display7SEG2+0x31c>)
 8000dcc:	f001 f80f 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	4844      	ldr	r0, [pc, #272]	; (8000ee8 <display7SEG2+0x31c>)
 8000dd6:	f001 f80a 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2108      	movs	r1, #8
 8000dde:	4842      	ldr	r0, [pc, #264]	; (8000ee8 <display7SEG2+0x31c>)
 8000de0:	f001 f805 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2110      	movs	r1, #16
 8000de8:	483f      	ldr	r0, [pc, #252]	; (8000ee8 <display7SEG2+0x31c>)
 8000dea:	f001 f800 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2120      	movs	r1, #32
 8000df2:	483d      	ldr	r0, [pc, #244]	; (8000ee8 <display7SEG2+0x31c>)
 8000df4:	f000 fffb 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	483a      	ldr	r0, [pc, #232]	; (8000ee8 <display7SEG2+0x31c>)
 8000dfe:	f000 fff6 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000e02:	e06c      	b.n	8000ede <display7SEG2+0x312>
		case 7:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2101      	movs	r1, #1
 8000e08:	4837      	ldr	r0, [pc, #220]	; (8000ee8 <display7SEG2+0x31c>)
 8000e0a:	f000 fff0 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2102      	movs	r1, #2
 8000e12:	4835      	ldr	r0, [pc, #212]	; (8000ee8 <display7SEG2+0x31c>)
 8000e14:	f000 ffeb 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2104      	movs	r1, #4
 8000e1c:	4832      	ldr	r0, [pc, #200]	; (8000ee8 <display7SEG2+0x31c>)
 8000e1e:	f000 ffe6 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2108      	movs	r1, #8
 8000e26:	4830      	ldr	r0, [pc, #192]	; (8000ee8 <display7SEG2+0x31c>)
 8000e28:	f000 ffe1 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2110      	movs	r1, #16
 8000e30:	482d      	ldr	r0, [pc, #180]	; (8000ee8 <display7SEG2+0x31c>)
 8000e32:	f000 ffdc 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2120      	movs	r1, #32
 8000e3a:	482b      	ldr	r0, [pc, #172]	; (8000ee8 <display7SEG2+0x31c>)
 8000e3c:	f000 ffd7 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2140      	movs	r1, #64	; 0x40
 8000e44:	4828      	ldr	r0, [pc, #160]	; (8000ee8 <display7SEG2+0x31c>)
 8000e46:	f000 ffd2 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000e4a:	e048      	b.n	8000ede <display7SEG2+0x312>
		case 8:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4825      	ldr	r0, [pc, #148]	; (8000ee8 <display7SEG2+0x31c>)
 8000e52:	f000 ffcc 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2102      	movs	r1, #2
 8000e5a:	4823      	ldr	r0, [pc, #140]	; (8000ee8 <display7SEG2+0x31c>)
 8000e5c:	f000 ffc7 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG9_Pin, RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2104      	movs	r1, #4
 8000e64:	4820      	ldr	r0, [pc, #128]	; (8000ee8 <display7SEG2+0x31c>)
 8000e66:	f000 ffc2 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	481e      	ldr	r0, [pc, #120]	; (8000ee8 <display7SEG2+0x31c>)
 8000e70:	f000 ffbd 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2110      	movs	r1, #16
 8000e78:	481b      	ldr	r0, [pc, #108]	; (8000ee8 <display7SEG2+0x31c>)
 8000e7a:	f000 ffb8 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2120      	movs	r1, #32
 8000e82:	4819      	ldr	r0, [pc, #100]	; (8000ee8 <display7SEG2+0x31c>)
 8000e84:	f000 ffb3 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2140      	movs	r1, #64	; 0x40
 8000e8c:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <display7SEG2+0x31c>)
 8000e8e:	f000 ffae 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000e92:	e024      	b.n	8000ede <display7SEG2+0x312>
		case 9:
			HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2101      	movs	r1, #1
 8000e98:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <display7SEG2+0x31c>)
 8000e9a:	f000 ffa8 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	4811      	ldr	r0, [pc, #68]	; (8000ee8 <display7SEG2+0x31c>)
 8000ea4:	f000 ffa3 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2104      	movs	r1, #4
 8000eac:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <display7SEG2+0x31c>)
 8000eae:	f000 ff9e 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2108      	movs	r1, #8
 8000eb6:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <display7SEG2+0x31c>)
 8000eb8:	f000 ff99 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <display7SEG2+0x31c>)
 8000ec2:	f000 ff94 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2120      	movs	r1, #32
 8000eca:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <display7SEG2+0x31c>)
 8000ecc:	f000 ff8f 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2140      	movs	r1, #64	; 0x40
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <display7SEG2+0x31c>)
 8000ed6:	f000 ff8a 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000eda:	e000      	b.n	8000ede <display7SEG2+0x312>
		default:
			break;
 8000edc:	bf00      	nop
	}
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40010c00 	.word	0x40010c00

08000eec <update7SEG1>:
const int MAX_LED = 4;
//int index_led1 = 0;
//int index_led2 = 0;
int index_led=0;
int led_buffer[4] = {1 , 2 , 3 , 4};
void update7SEG1 ( int index ) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	switch (index ) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <update7SEG1+0x16>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d012      	beq.n	8000f26 <update7SEG1+0x3a>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
			display7SEG1(led_buffer[1]);
			break ;
		default :
			break ;
 8000f00:	e023      	b.n	8000f4a <update7SEG1+0x5e>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f08:	4812      	ldr	r0, [pc, #72]	; (8000f54 <update7SEG1+0x68>)
 8000f0a:	f000 ff70 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f14:	480f      	ldr	r0, [pc, #60]	; (8000f54 <update7SEG1+0x68>)
 8000f16:	f000 ff6a 	bl	8001dee <HAL_GPIO_WritePin>
			display7SEG1(led_buffer[0]);
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <update7SEG1+0x6c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fc92 	bl	8000848 <display7SEG1>
			break ;
 8000f24:	e011      	b.n	8000f4a <update7SEG1+0x5e>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f2c:	4809      	ldr	r0, [pc, #36]	; (8000f54 <update7SEG1+0x68>)
 8000f2e:	f000 ff5e 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f38:	4806      	ldr	r0, [pc, #24]	; (8000f54 <update7SEG1+0x68>)
 8000f3a:	f000 ff58 	bl	8001dee <HAL_GPIO_WritePin>
			display7SEG1(led_buffer[1]);
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <update7SEG1+0x6c>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fc80 	bl	8000848 <display7SEG1>
			break ;
 8000f48:	bf00      	nop
	}
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40010c00 	.word	0x40010c00
 8000f58:	20000074 	.word	0x20000074

08000f5c <update7SEG2>:
void update7SEG2(int index){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	switch (index){
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <update7SEG2+0x16>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d012      	beq.n	8000f96 <update7SEG2+0x3a>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
			display7SEG2(led_buffer[3]);
			break;
		default:
			break;
 8000f70:	e023      	b.n	8000fba <update7SEG2+0x5e>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f78:	4812      	ldr	r0, [pc, #72]	; (8000fc4 <update7SEG2+0x68>)
 8000f7a:	f000 ff38 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f84:	480f      	ldr	r0, [pc, #60]	; (8000fc4 <update7SEG2+0x68>)
 8000f86:	f000 ff32 	bl	8001dee <HAL_GPIO_WritePin>
			display7SEG2(led_buffer[2]);
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <update7SEG2+0x6c>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fe1c 	bl	8000bcc <display7SEG2>
			break;
 8000f94:	e011      	b.n	8000fba <update7SEG2+0x5e>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <update7SEG2+0x68>)
 8000f9e:	f000 ff26 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa8:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <update7SEG2+0x68>)
 8000faa:	f000 ff20 	bl	8001dee <HAL_GPIO_WritePin>
			display7SEG2(led_buffer[3]);
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <update7SEG2+0x6c>)
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fe0a 	bl	8000bcc <display7SEG2>
			break;
 8000fb8:	bf00      	nop
	}
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40010c00 	.word	0x40010c00
 8000fc8:	20000074 	.word	0x20000074

08000fcc <updateClockBuffer_auto>:

void updateClockBuffer_auto(){
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
			led_buffer[1]=time1/10;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <updateClockBuffer_auto+0x70>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a1a      	ldr	r2, [pc, #104]	; (8001040 <updateClockBuffer_auto+0x74>)
 8000fd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fda:	1092      	asrs	r2, r2, #2
 8000fdc:	17db      	asrs	r3, r3, #31
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	4a18      	ldr	r2, [pc, #96]	; (8001044 <updateClockBuffer_auto+0x78>)
 8000fe2:	6053      	str	r3, [r2, #4]
			led_buffer[0]=time1%10;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <updateClockBuffer_auto+0x70>)
 8000fe6:	6819      	ldr	r1, [r3, #0]
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <updateClockBuffer_auto+0x74>)
 8000fea:	fb83 2301 	smull	r2, r3, r3, r1
 8000fee:	109a      	asrs	r2, r3, #2
 8000ff0:	17cb      	asrs	r3, r1, #31
 8000ff2:	1ad2      	subs	r2, r2, r3
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	1aca      	subs	r2, r1, r3
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <updateClockBuffer_auto+0x78>)
 8001000:	601a      	str	r2, [r3, #0]
			led_buffer[3]=time2/10;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <updateClockBuffer_auto+0x7c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <updateClockBuffer_auto+0x74>)
 8001008:	fb82 1203 	smull	r1, r2, r2, r3
 800100c:	1092      	asrs	r2, r2, #2
 800100e:	17db      	asrs	r3, r3, #31
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	4a0c      	ldr	r2, [pc, #48]	; (8001044 <updateClockBuffer_auto+0x78>)
 8001014:	60d3      	str	r3, [r2, #12]
			led_buffer[2]=time2%10;
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <updateClockBuffer_auto+0x7c>)
 8001018:	6819      	ldr	r1, [r3, #0]
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <updateClockBuffer_auto+0x74>)
 800101c:	fb83 2301 	smull	r2, r3, r3, r1
 8001020:	109a      	asrs	r2, r3, #2
 8001022:	17cb      	asrs	r3, r1, #31
 8001024:	1ad2      	subs	r2, r2, r3
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	1aca      	subs	r2, r1, r3
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <updateClockBuffer_auto+0x78>)
 8001032:	609a      	str	r2, [r3, #8]

}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	200000ac 	.word	0x200000ac
 8001040:	66666667 	.word	0x66666667
 8001044:	20000074 	.word	0x20000074
 8001048:	200000b0 	.word	0x200000b0

0800104c <updateClockBuffer_manual>:
void updateClockBuffer_manual(){
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
	switch(global_status){
 8001050:	4b37      	ldr	r3, [pc, #220]	; (8001130 <updateClockBuffer_manual+0xe4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b1b      	cmp	r3, #27
 8001056:	d046      	beq.n	80010e6 <updateClockBuffer_manual+0x9a>
 8001058:	2b1b      	cmp	r3, #27
 800105a:	dc64      	bgt.n	8001126 <updateClockBuffer_manual+0xda>
 800105c:	2b19      	cmp	r3, #25
 800105e:	d002      	beq.n	8001066 <updateClockBuffer_manual+0x1a>
 8001060:	2b1a      	cmp	r3, #26
 8001062:	d020      	beq.n	80010a6 <updateClockBuffer_manual+0x5a>
			led_buffer[0]=green_modify1%10;
			led_buffer[3]=4;
			led_buffer[2]=4;
			break;
		default:
			break;
 8001064:	e05f      	b.n	8001126 <updateClockBuffer_manual+0xda>
			led_buffer[1]=red_modify1/10;
 8001066:	4b33      	ldr	r3, [pc, #204]	; (8001134 <updateClockBuffer_manual+0xe8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a33      	ldr	r2, [pc, #204]	; (8001138 <updateClockBuffer_manual+0xec>)
 800106c:	fb82 1203 	smull	r1, r2, r2, r3
 8001070:	1092      	asrs	r2, r2, #2
 8001072:	17db      	asrs	r3, r3, #31
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	4a31      	ldr	r2, [pc, #196]	; (800113c <updateClockBuffer_manual+0xf0>)
 8001078:	6053      	str	r3, [r2, #4]
			led_buffer[0]=red_modify1%10;
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <updateClockBuffer_manual+0xe8>)
 800107c:	6819      	ldr	r1, [r3, #0]
 800107e:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <updateClockBuffer_manual+0xec>)
 8001080:	fb83 2301 	smull	r2, r3, r3, r1
 8001084:	109a      	asrs	r2, r3, #2
 8001086:	17cb      	asrs	r3, r1, #31
 8001088:	1ad2      	subs	r2, r2, r3
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	1aca      	subs	r2, r1, r3
 8001094:	4b29      	ldr	r3, [pc, #164]	; (800113c <updateClockBuffer_manual+0xf0>)
 8001096:	601a      	str	r2, [r3, #0]
			led_buffer[3]=2;
 8001098:	4b28      	ldr	r3, [pc, #160]	; (800113c <updateClockBuffer_manual+0xf0>)
 800109a:	2202      	movs	r2, #2
 800109c:	60da      	str	r2, [r3, #12]
			led_buffer[2]=2;
 800109e:	4b27      	ldr	r3, [pc, #156]	; (800113c <updateClockBuffer_manual+0xf0>)
 80010a0:	2202      	movs	r2, #2
 80010a2:	609a      	str	r2, [r3, #8]
			break;
 80010a4:	e040      	b.n	8001128 <updateClockBuffer_manual+0xdc>
			led_buffer[1]=yellow_modify1/10;
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <updateClockBuffer_manual+0xf4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a23      	ldr	r2, [pc, #140]	; (8001138 <updateClockBuffer_manual+0xec>)
 80010ac:	fb82 1203 	smull	r1, r2, r2, r3
 80010b0:	1092      	asrs	r2, r2, #2
 80010b2:	17db      	asrs	r3, r3, #31
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	4a21      	ldr	r2, [pc, #132]	; (800113c <updateClockBuffer_manual+0xf0>)
 80010b8:	6053      	str	r3, [r2, #4]
			led_buffer[0]=yellow_modify1%10;
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <updateClockBuffer_manual+0xf4>)
 80010bc:	6819      	ldr	r1, [r3, #0]
 80010be:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <updateClockBuffer_manual+0xec>)
 80010c0:	fb83 2301 	smull	r2, r3, r3, r1
 80010c4:	109a      	asrs	r2, r3, #2
 80010c6:	17cb      	asrs	r3, r1, #31
 80010c8:	1ad2      	subs	r2, r2, r3
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	1aca      	subs	r2, r1, r3
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <updateClockBuffer_manual+0xf0>)
 80010d6:	601a      	str	r2, [r3, #0]
			led_buffer[3]=3;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <updateClockBuffer_manual+0xf0>)
 80010da:	2203      	movs	r2, #3
 80010dc:	60da      	str	r2, [r3, #12]
			led_buffer[2]=3;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <updateClockBuffer_manual+0xf0>)
 80010e0:	2203      	movs	r2, #3
 80010e2:	609a      	str	r2, [r3, #8]
			break;
 80010e4:	e020      	b.n	8001128 <updateClockBuffer_manual+0xdc>
			led_buffer[1]=green_modify1/10;
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <updateClockBuffer_manual+0xf8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a13      	ldr	r2, [pc, #76]	; (8001138 <updateClockBuffer_manual+0xec>)
 80010ec:	fb82 1203 	smull	r1, r2, r2, r3
 80010f0:	1092      	asrs	r2, r2, #2
 80010f2:	17db      	asrs	r3, r3, #31
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	4a11      	ldr	r2, [pc, #68]	; (800113c <updateClockBuffer_manual+0xf0>)
 80010f8:	6053      	str	r3, [r2, #4]
			led_buffer[0]=green_modify1%10;
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <updateClockBuffer_manual+0xf8>)
 80010fc:	6819      	ldr	r1, [r3, #0]
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <updateClockBuffer_manual+0xec>)
 8001100:	fb83 2301 	smull	r2, r3, r3, r1
 8001104:	109a      	asrs	r2, r3, #2
 8001106:	17cb      	asrs	r3, r1, #31
 8001108:	1ad2      	subs	r2, r2, r3
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	1aca      	subs	r2, r1, r3
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <updateClockBuffer_manual+0xf0>)
 8001116:	601a      	str	r2, [r3, #0]
			led_buffer[3]=4;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <updateClockBuffer_manual+0xf0>)
 800111a:	2204      	movs	r2, #4
 800111c:	60da      	str	r2, [r3, #12]
			led_buffer[2]=4;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <updateClockBuffer_manual+0xf0>)
 8001120:	2204      	movs	r2, #4
 8001122:	609a      	str	r2, [r3, #8]
			break;
 8001124:	e000      	b.n	8001128 <updateClockBuffer_manual+0xdc>
			break;
 8001126:	bf00      	nop
	}
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	20000058 	.word	0x20000058
 8001134:	20000040 	.word	0x20000040
 8001138:	66666667 	.word	0x66666667
 800113c:	20000074 	.word	0x20000074
 8001140:	20000048 	.word	0x20000048
 8001144:	20000050 	.word	0x20000050

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114c:	f000 fb4e 	bl	80017ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001150:	f000 f818 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001154:	f000 f89e 	bl	8001294 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001158:	f000 f850 	bl	80011fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 800115c:	4808      	ldr	r0, [pc, #32]	; (8001180 <main+0x38>)
 800115e:	f001 faa3 	bl	80026a8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(100);
 8001162:	2064      	movs	r0, #100	; 0x64
 8001164:	f000 f918 	bl	8001398 <setTimer1>
  setTimer2(50);
 8001168:	2032      	movs	r0, #50	; 0x32
 800116a:	f000 f929 	bl	80013c0 <setTimer2>
  setTimer3(50);
 800116e:	2032      	movs	r0, #50	; 0x32
 8001170:	f000 f93a 	bl	80013e8 <setTimer3>
  while (1)
  {
	 fsm_automatic();
 8001174:	f7ff f92e 	bl	80003d4 <fsm_automatic>
	 fsm_manual();
 8001178:	f7ff fa20 	bl	80005bc <fsm_manual>
	 fsm_automatic();
 800117c:	e7fa      	b.n	8001174 <main+0x2c>
 800117e:	bf00      	nop
 8001180:	200000dc 	.word	0x200000dc

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b090      	sub	sp, #64	; 0x40
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0318 	add.w	r3, r7, #24
 800118e:	2228      	movs	r2, #40	; 0x28
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fe38 	bl	8002e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011aa:	2301      	movs	r3, #1
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ae:	2310      	movs	r3, #16
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b6:	f107 0318 	add.w	r3, r7, #24
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fe48 	bl	8001e50 <HAL_RCC_OscConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011c6:	f000 f8e1 	bl	800138c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ca:	230f      	movs	r3, #15
 80011cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 f8b4 	bl	8002350 <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011ee:	f000 f8cd 	bl	800138c <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3740      	adds	r7, #64	; 0x40
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_TIM2_Init+0x94>)
 800121a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MX_TIM2_Init+0x94>)
 8001222:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001226:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <MX_TIM2_Init+0x94>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_TIM2_Init+0x94>)
 8001230:	2209      	movs	r2, #9
 8001232:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <MX_TIM2_Init+0x94>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_TIM2_Init+0x94>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001240:	4813      	ldr	r0, [pc, #76]	; (8001290 <MX_TIM2_Init+0x94>)
 8001242:	f001 f9e1 	bl	8002608 <HAL_TIM_Base_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800124c:	f000 f89e 	bl	800138c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001254:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	4619      	mov	r1, r3
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <MX_TIM2_Init+0x94>)
 800125e:	f001 fb5f 	bl	8002920 <HAL_TIM_ConfigClockSource>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001268:	f000 f890 	bl	800138c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_TIM2_Init+0x94>)
 800127a:	f001 fd37 	bl	8002cec <HAL_TIMEx_MasterConfigSynchronization>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001284:	f000 f882 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200000dc 	.word	0x200000dc

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a8:	4b2f      	ldr	r3, [pc, #188]	; (8001368 <MX_GPIO_Init+0xd4>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a2e      	ldr	r2, [pc, #184]	; (8001368 <MX_GPIO_Init+0xd4>)
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <MX_GPIO_Init+0xd4>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b29      	ldr	r3, [pc, #164]	; (8001368 <MX_GPIO_Init+0xd4>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a28      	ldr	r2, [pc, #160]	; (8001368 <MX_GPIO_Init+0xd4>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b26      	ldr	r3, [pc, #152]	; (8001368 <MX_GPIO_Init+0xd4>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <MX_GPIO_Init+0xd4>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a22      	ldr	r2, [pc, #136]	; (8001368 <MX_GPIO_Init+0xd4>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <MX_GPIO_Init+0xd4>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|LED_RED_Pin
 80012f0:	2200      	movs	r2, #0
 80012f2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80012f6:	481d      	ldr	r0, [pc, #116]	; (800136c <MX_GPIO_Init+0xd8>)
 80012f8:	f000 fd79 	bl	8001dee <HAL_GPIO_WritePin>
                          |SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|RED2_Pin
                          |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG7_Pin|SEG8_Pin|SEG9_Pin|EN3_Pin
 80012fc:	2200      	movs	r2, #0
 80012fe:	f24f 017f 	movw	r1, #61567	; 0xf07f
 8001302:	481b      	ldr	r0, [pc, #108]	; (8001370 <MX_GPIO_Init+0xdc>)
 8001304:	f000 fd73 	bl	8001dee <HAL_GPIO_WritePin>
                          |EN2_Pin|EN1_Pin|EN0_Pin|SEG10_Pin
                          |SEG11_Pin|SEG12_Pin|SEG13_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8001308:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800130c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001312:	2301      	movs	r3, #1
 8001314:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4619      	mov	r1, r3
 800131c:	4815      	ldr	r0, [pc, #84]	; (8001374 <MX_GPIO_Init+0xe0>)
 800131e:	f000 fbd5 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin LED_RED_Pin
                           SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|LED_RED_Pin
 8001322:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001326:	613b      	str	r3, [r7, #16]
                          |SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|RED2_Pin
                          |YELLOW2_Pin|GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2302      	movs	r3, #2
 8001332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_GPIO_Init+0xd8>)
 800133c:	f000 fbc6 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG7_Pin SEG8_Pin SEG9_Pin EN3_Pin
                           EN2_Pin EN1_Pin EN0_Pin SEG10_Pin
                           SEG11_Pin SEG12_Pin SEG13_Pin */
  GPIO_InitStruct.Pin = SEG7_Pin|SEG8_Pin|SEG9_Pin|EN3_Pin
 8001340:	f24f 037f 	movw	r3, #61567	; 0xf07f
 8001344:	613b      	str	r3, [r7, #16]
                          |EN2_Pin|EN1_Pin|EN0_Pin|SEG10_Pin
                          |SEG11_Pin|SEG12_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2302      	movs	r3, #2
 8001350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_GPIO_Init+0xdc>)
 800135a:	f000 fbb7 	bl	8001acc <HAL_GPIO_Init>

}
 800135e:	bf00      	nop
 8001360:	3720      	adds	r7, #32
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000
 800136c:	40010800 	.word	0x40010800
 8001370:	40010c00 	.word	0x40010c00
 8001374:	40011000 	.word	0x40011000

08001378 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
 void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	 timer_isr();
 8001380:	f000 f888 	bl	8001494 <timer_isr>
 }
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001394:	e7fe      	b.n	8001394 <Error_Handler+0x8>
	...

08001398 <setTimer1>:
int timer2_flag=0;
int timer2_counter=0;

int timer3_flag=0;
int timer3_counter=0;
void setTimer1(int duration){
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	timer1_flag=0;
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <setTimer1+0x20>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
	timer1_counter=duration;
 80013a6:	4a05      	ldr	r2, [pc, #20]	; (80013bc <setTimer1+0x24>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	200000c4 	.word	0x200000c4
 80013bc:	200000c8 	.word	0x200000c8

080013c0 <setTimer2>:

void setTimer2(int duration){
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	timer2_flag=0;
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <setTimer2+0x20>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
	timer2_counter=duration;
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <setTimer2+0x24>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6013      	str	r3, [r2, #0]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	200000cc 	.word	0x200000cc
 80013e4:	200000d0 	.word	0x200000d0

080013e8 <setTimer3>:
void setTimer3(int duration){
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	timer3_flag=0;
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <setTimer3+0x20>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
	timer3_counter=duration;
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <setTimer3+0x24>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	200000d4 	.word	0x200000d4
 800140c:	200000d8 	.word	0x200000d8

08001410 <timerRun>:

void timerRun(){
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
	if (timer1_counter>0){
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <timerRun+0x6c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	dd0b      	ble.n	8001434 <timerRun+0x24>
		timer1_counter--;
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <timerRun+0x6c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3b01      	subs	r3, #1
 8001422:	4a16      	ldr	r2, [pc, #88]	; (800147c <timerRun+0x6c>)
 8001424:	6013      	str	r3, [r2, #0]
		if (timer1_counter<=0){
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <timerRun+0x6c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	dc02      	bgt.n	8001434 <timerRun+0x24>
			timer1_flag=1;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <timerRun+0x70>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter>0){
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <timerRun+0x74>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	dd0b      	ble.n	8001454 <timerRun+0x44>
		timer2_counter--;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <timerRun+0x74>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3b01      	subs	r3, #1
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <timerRun+0x74>)
 8001444:	6013      	str	r3, [r2, #0]
		if (timer2_counter<=0){
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <timerRun+0x74>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	dc02      	bgt.n	8001454 <timerRun+0x44>
			timer2_flag=1;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <timerRun+0x78>)
 8001450:	2201      	movs	r2, #1
 8001452:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter>0){
 8001454:	4b0d      	ldr	r3, [pc, #52]	; (800148c <timerRun+0x7c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	dd0b      	ble.n	8001474 <timerRun+0x64>
		timer3_counter--;
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <timerRun+0x7c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3b01      	subs	r3, #1
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <timerRun+0x7c>)
 8001464:	6013      	str	r3, [r2, #0]
		if (timer3_counter<=0){
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <timerRun+0x7c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	dc02      	bgt.n	8001474 <timerRun+0x64>
			timer3_flag=1;
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <timerRun+0x80>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	200000c8 	.word	0x200000c8
 8001480:	200000c4 	.word	0x200000c4
 8001484:	200000d0 	.word	0x200000d0
 8001488:	200000cc 	.word	0x200000cc
 800148c:	200000d8 	.word	0x200000d8
 8001490:	200000d4 	.word	0x200000d4

08001494 <timer_isr>:

void timer_isr(){
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	timerRun();
 8001498:	f7ff ffba 	bl	8001410 <timerRun>
	getKeyInput1();
 800149c:	f7fe fe8c 	bl	80001b8 <getKeyInput1>
	getKeyInput2();
 80014a0:	f7fe fed8 	bl	8000254 <getKeyInput2>
	getKeyInput3();
 80014a4:	f7fe ff24 	bl	80002f0 <getKeyInput3>
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_MspInit+0x5c>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	4a14      	ldr	r2, [pc, #80]	; (8001508 <HAL_MspInit+0x5c>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6193      	str	r3, [r2, #24]
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_MspInit+0x5c>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_MspInit+0x5c>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <HAL_MspInit+0x5c>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	61d3      	str	r3, [r2, #28]
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_MspInit+0x5c>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_MspInit+0x60>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	4a04      	ldr	r2, [pc, #16]	; (800150c <HAL_MspInit+0x60>)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	40021000 	.word	0x40021000
 800150c:	40010000 	.word	0x40010000

08001510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001520:	d113      	bne.n	800154a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_TIM_Base_MspInit+0x44>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <HAL_TIM_Base_MspInit+0x44>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_TIM_Base_MspInit+0x44>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	201c      	movs	r0, #28
 8001540:	f000 fa8d 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001544:	201c      	movs	r0, #28
 8001546:	f000 faa6 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000

08001558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800155c:	e7fe      	b.n	800155c <NMI_Handler+0x4>

0800155e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <MemManage_Handler+0x4>

0800156a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <UsageFault_Handler+0x4>

08001576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159e:	f000 f96b 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <TIM2_IRQHandler+0x10>)
 80015ae:	f001 f8c7 	bl	8002740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200000dc 	.word	0x200000dc

080015bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <traffic_light>:
 *  Created on: Nov 11, 2024
 *      Author: Legion 5
 */

#include "global.h"
void traffic_light(int status){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b14      	subs	r3, #20
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	f200 8093 	bhi.w	8001700 <traffic_light+0x138>
 80015da:	a201      	add	r2, pc, #4	; (adr r2, 80015e0 <traffic_light+0x18>)
 80015dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e0:	080015f1 	.word	0x080015f1
 80015e4:	08001635 	.word	0x08001635
 80015e8:	08001679 	.word	0x08001679
 80015ec:	080016bd 	.word	0x080016bd
	switch (status) {
		case RED_GREEN :
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2104      	movs	r1, #4
 80015f4:	4845      	ldr	r0, [pc, #276]	; (800170c <traffic_light+0x144>)
 80015f6:	f000 fbfa 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2108      	movs	r1, #8
 80015fe:	4843      	ldr	r0, [pc, #268]	; (800170c <traffic_light+0x144>)
 8001600:	f000 fbf5 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	2110      	movs	r1, #16
 8001608:	4840      	ldr	r0, [pc, #256]	; (800170c <traffic_light+0x144>)
 800160a:	f000 fbf0 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001614:	483d      	ldr	r0, [pc, #244]	; (800170c <traffic_light+0x144>)
 8001616:	f000 fbea 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001620:	483a      	ldr	r0, [pc, #232]	; (800170c <traffic_light+0x144>)
 8001622:	f000 fbe4 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8001626:	2201      	movs	r2, #1
 8001628:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800162c:	4837      	ldr	r0, [pc, #220]	; (800170c <traffic_light+0x144>)
 800162e:	f000 fbde 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8001632:	e066      	b.n	8001702 <traffic_light+0x13a>
		case RED_YELLOW :
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8001634:	2201      	movs	r2, #1
 8001636:	2104      	movs	r1, #4
 8001638:	4834      	ldr	r0, [pc, #208]	; (800170c <traffic_light+0x144>)
 800163a:	f000 fbd8 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2108      	movs	r1, #8
 8001642:	4832      	ldr	r0, [pc, #200]	; (800170c <traffic_light+0x144>)
 8001644:	f000 fbd3 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	2110      	movs	r1, #16
 800164c:	482f      	ldr	r0, [pc, #188]	; (800170c <traffic_light+0x144>)
 800164e:	f000 fbce 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001658:	482c      	ldr	r0, [pc, #176]	; (800170c <traffic_light+0x144>)
 800165a:	f000 fbc8 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 800165e:	2201      	movs	r2, #1
 8001660:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001664:	4829      	ldr	r0, [pc, #164]	; (800170c <traffic_light+0x144>)
 8001666:	f000 fbc2 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001670:	4826      	ldr	r0, [pc, #152]	; (800170c <traffic_light+0x144>)
 8001672:	f000 fbbc 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8001676:	e044      	b.n	8001702 <traffic_light+0x13a>
		case GREEN_RED :
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2104      	movs	r1, #4
 800167c:	4823      	ldr	r0, [pc, #140]	; (800170c <traffic_light+0x144>)
 800167e:	f000 fbb6 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2108      	movs	r1, #8
 8001686:	4821      	ldr	r0, [pc, #132]	; (800170c <traffic_light+0x144>)
 8001688:	f000 fbb1 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800168c:	2201      	movs	r2, #1
 800168e:	2110      	movs	r1, #16
 8001690:	481e      	ldr	r0, [pc, #120]	; (800170c <traffic_light+0x144>)
 8001692:	f000 fbac 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8001696:	2201      	movs	r2, #1
 8001698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169c:	481b      	ldr	r0, [pc, #108]	; (800170c <traffic_light+0x144>)
 800169e:	f000 fba6 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a8:	4818      	ldr	r0, [pc, #96]	; (800170c <traffic_light+0x144>)
 80016aa:	f000 fba0 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b4:	4815      	ldr	r0, [pc, #84]	; (800170c <traffic_light+0x144>)
 80016b6:	f000 fb9a 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 80016ba:	e022      	b.n	8001702 <traffic_light+0x13a>
		case YELLOW_RED :
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	2104      	movs	r1, #4
 80016c0:	4812      	ldr	r0, [pc, #72]	; (800170c <traffic_light+0x144>)
 80016c2:	f000 fb94 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 80016c6:	2201      	movs	r2, #1
 80016c8:	2108      	movs	r1, #8
 80016ca:	4810      	ldr	r0, [pc, #64]	; (800170c <traffic_light+0x144>)
 80016cc:	f000 fb8f 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2110      	movs	r1, #16
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <traffic_light+0x144>)
 80016d6:	f000 fb8a 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e0:	480a      	ldr	r0, [pc, #40]	; (800170c <traffic_light+0x144>)
 80016e2:	f000 fb84 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016ec:	4807      	ldr	r0, [pc, #28]	; (800170c <traffic_light+0x144>)
 80016ee:	f000 fb7e 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016f8:	4804      	ldr	r0, [pc, #16]	; (800170c <traffic_light+0x144>)
 80016fa:	f000 fb78 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 80016fe:	e000      	b.n	8001702 <traffic_light+0x13a>
		default:
			break;
 8001700:	bf00      	nop
	}
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40010800 	.word	0x40010800

08001710 <red_manual>:
void red_manual(){
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	if (timer3_flag==1){
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <red_manual+0x28>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d10b      	bne.n	8001734 <red_manual+0x24>
		setTimer3(50);
 800171c:	2032      	movs	r0, #50	; 0x32
 800171e:	f7ff fe63 	bl	80013e8 <setTimer3>
		HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 8001722:	2104      	movs	r1, #4
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <red_manual+0x2c>)
 8001726:	f000 fb7a 	bl	8001e1e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 800172a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172e:	4803      	ldr	r0, [pc, #12]	; (800173c <red_manual+0x2c>)
 8001730:	f000 fb75 	bl	8001e1e <HAL_GPIO_TogglePin>
	}
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200000d4 	.word	0x200000d4
 800173c:	40010800 	.word	0x40010800

08001740 <yellow_manual>:
void yellow_manual(){
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	if (timer3_flag==1){
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <yellow_manual+0x28>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d10b      	bne.n	8001764 <yellow_manual+0x24>
		setTimer3(50);
 800174c:	2032      	movs	r0, #50	; 0x32
 800174e:	f7ff fe4b 	bl	80013e8 <setTimer3>
		HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8001752:	2108      	movs	r1, #8
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <yellow_manual+0x2c>)
 8001756:	f000 fb62 	bl	8001e1e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 800175a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175e:	4803      	ldr	r0, [pc, #12]	; (800176c <yellow_manual+0x2c>)
 8001760:	f000 fb5d 	bl	8001e1e <HAL_GPIO_TogglePin>
	}
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200000d4 	.word	0x200000d4
 800176c:	40010800 	.word	0x40010800

08001770 <green_manual>:
void green_manual(){
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	if (timer3_flag==1){
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <green_manual+0x28>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d10b      	bne.n	8001794 <green_manual+0x24>
		setTimer3(50);
 800177c:	2032      	movs	r0, #50	; 0x32
 800177e:	f7ff fe33 	bl	80013e8 <setTimer3>
		HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 8001782:	2110      	movs	r1, #16
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <green_manual+0x2c>)
 8001786:	f000 fb4a 	bl	8001e1e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 800178a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800178e:	4803      	ldr	r0, [pc, #12]	; (800179c <green_manual+0x2c>)
 8001790:	f000 fb45 	bl	8001e1e <HAL_GPIO_TogglePin>
	}
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200000d4 	.word	0x200000d4
 800179c:	40010800 	.word	0x40010800

080017a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a0:	f7ff ff0c 	bl	80015bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480b      	ldr	r0, [pc, #44]	; (80017d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017a6:	490c      	ldr	r1, [pc, #48]	; (80017d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017a8:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017bc:	4c09      	ldr	r4, [pc, #36]	; (80017e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ca:	f001 faf9 	bl	8002dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ce:	f7ff fcbb 	bl	8001148 <main>
  bx lr
 80017d2:	4770      	bx	lr
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80017dc:	08002e5c 	.word	0x08002e5c
  ldr r2, =_sbss
 80017e0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80017e4:	20000128 	.word	0x20000128

080017e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC1_2_IRQHandler>
	...

080017ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_Init+0x28>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_Init+0x28>)
 80017f6:	f043 0310 	orr.w	r3, r3, #16
 80017fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f923 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	200f      	movs	r0, #15
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff fe50 	bl	80014ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40022000 	.word	0x40022000

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f93b 	bl	8001ab2 <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f903 	bl	8001a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000084 	.word	0x20000084
 8001870:	2000008c 	.word	0x2000008c
 8001874:	20000088 	.word	0x20000088

08001878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_IncTick+0x1c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x20>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a03      	ldr	r2, [pc, #12]	; (8001898 <HAL_IncTick+0x20>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	2000008c 	.word	0x2000008c
 8001898:	20000124 	.word	0x20000124

0800189c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b02      	ldr	r3, [pc, #8]	; (80018ac <HAL_GetTick+0x10>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	20000124 	.word	0x20000124

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4906      	ldr	r1, [pc, #24]	; (8001948 <__NVIC_EnableIRQ+0x34>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100

0800194c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	; (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	0112      	lsls	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <__NVIC_SetPriority+0x50>)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf28      	it	cs
 80019be:	2304      	movcs	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b03      	subs	r3, #3
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
         );
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	; 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff90 	bl	800194c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff2d 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a70:	f7ff ff42 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f7ff ff90 	bl	80019a0 <NVIC_EncodePriority>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff5f 	bl	800194c <__NVIC_SetPriority>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff35 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffa2 	bl	8001a04 <SysTick_Config>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b08b      	sub	sp, #44	; 0x2c
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ade:	e148      	b.n	8001d72 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f040 8137 	bne.w	8001d6c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4aa3      	ldr	r2, [pc, #652]	; (8001d90 <HAL_GPIO_Init+0x2c4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d05e      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b08:	4aa1      	ldr	r2, [pc, #644]	; (8001d90 <HAL_GPIO_Init+0x2c4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d875      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b0e:	4aa1      	ldr	r2, [pc, #644]	; (8001d94 <HAL_GPIO_Init+0x2c8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d058      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b14:	4a9f      	ldr	r2, [pc, #636]	; (8001d94 <HAL_GPIO_Init+0x2c8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d86f      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b1a:	4a9f      	ldr	r2, [pc, #636]	; (8001d98 <HAL_GPIO_Init+0x2cc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d052      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b20:	4a9d      	ldr	r2, [pc, #628]	; (8001d98 <HAL_GPIO_Init+0x2cc>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d869      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b26:	4a9d      	ldr	r2, [pc, #628]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d04c      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b2c:	4a9b      	ldr	r2, [pc, #620]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d863      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b32:	4a9b      	ldr	r2, [pc, #620]	; (8001da0 <HAL_GPIO_Init+0x2d4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d046      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b38:	4a99      	ldr	r2, [pc, #612]	; (8001da0 <HAL_GPIO_Init+0x2d4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d85d      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b3e:	2b12      	cmp	r3, #18
 8001b40:	d82a      	bhi.n	8001b98 <HAL_GPIO_Init+0xcc>
 8001b42:	2b12      	cmp	r3, #18
 8001b44:	d859      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b46:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <HAL_GPIO_Init+0x80>)
 8001b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4c:	08001bc7 	.word	0x08001bc7
 8001b50:	08001ba1 	.word	0x08001ba1
 8001b54:	08001bb3 	.word	0x08001bb3
 8001b58:	08001bf5 	.word	0x08001bf5
 8001b5c:	08001bfb 	.word	0x08001bfb
 8001b60:	08001bfb 	.word	0x08001bfb
 8001b64:	08001bfb 	.word	0x08001bfb
 8001b68:	08001bfb 	.word	0x08001bfb
 8001b6c:	08001bfb 	.word	0x08001bfb
 8001b70:	08001bfb 	.word	0x08001bfb
 8001b74:	08001bfb 	.word	0x08001bfb
 8001b78:	08001bfb 	.word	0x08001bfb
 8001b7c:	08001bfb 	.word	0x08001bfb
 8001b80:	08001bfb 	.word	0x08001bfb
 8001b84:	08001bfb 	.word	0x08001bfb
 8001b88:	08001bfb 	.word	0x08001bfb
 8001b8c:	08001bfb 	.word	0x08001bfb
 8001b90:	08001ba9 	.word	0x08001ba9
 8001b94:	08001bbd 	.word	0x08001bbd
 8001b98:	4a82      	ldr	r2, [pc, #520]	; (8001da4 <HAL_GPIO_Init+0x2d8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b9e:	e02c      	b.n	8001bfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	623b      	str	r3, [r7, #32]
          break;
 8001ba6:	e029      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	3304      	adds	r3, #4
 8001bae:	623b      	str	r3, [r7, #32]
          break;
 8001bb0:	e024      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	623b      	str	r3, [r7, #32]
          break;
 8001bba:	e01f      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	330c      	adds	r3, #12
 8001bc2:	623b      	str	r3, [r7, #32]
          break;
 8001bc4:	e01a      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bce:	2304      	movs	r3, #4
 8001bd0:	623b      	str	r3, [r7, #32]
          break;
 8001bd2:	e013      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d105      	bne.n	8001be8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	611a      	str	r2, [r3, #16]
          break;
 8001be6:	e009      	b.n	8001bfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be8:	2308      	movs	r3, #8
 8001bea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	615a      	str	r2, [r3, #20]
          break;
 8001bf2:	e003      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
          break;
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          break;
 8001bfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2bff      	cmp	r3, #255	; 0xff
 8001c00:	d801      	bhi.n	8001c06 <HAL_GPIO_Init+0x13a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	e001      	b.n	8001c0a <HAL_GPIO_Init+0x13e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2bff      	cmp	r3, #255	; 0xff
 8001c10:	d802      	bhi.n	8001c18 <HAL_GPIO_Init+0x14c>
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	e002      	b.n	8001c1e <HAL_GPIO_Init+0x152>
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	3b08      	subs	r3, #8
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	210f      	movs	r1, #15
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	401a      	ands	r2, r3
 8001c30:	6a39      	ldr	r1, [r7, #32]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8090 	beq.w	8001d6c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c4c:	4b56      	ldr	r3, [pc, #344]	; (8001da8 <HAL_GPIO_Init+0x2dc>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a55      	ldr	r2, [pc, #340]	; (8001da8 <HAL_GPIO_Init+0x2dc>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_GPIO_Init+0x2dc>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c64:	4a51      	ldr	r2, [pc, #324]	; (8001dac <HAL_GPIO_Init+0x2e0>)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a49      	ldr	r2, [pc, #292]	; (8001db0 <HAL_GPIO_Init+0x2e4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d00d      	beq.n	8001cac <HAL_GPIO_Init+0x1e0>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a48      	ldr	r2, [pc, #288]	; (8001db4 <HAL_GPIO_Init+0x2e8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d007      	beq.n	8001ca8 <HAL_GPIO_Init+0x1dc>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a47      	ldr	r2, [pc, #284]	; (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d101      	bne.n	8001ca4 <HAL_GPIO_Init+0x1d8>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e004      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e002      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001cac:	2300      	movs	r3, #0
 8001cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb0:	f002 0203 	and.w	r2, r2, #3
 8001cb4:	0092      	lsls	r2, r2, #2
 8001cb6:	4093      	lsls	r3, r2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cbe:	493b      	ldr	r1, [pc, #236]	; (8001dac <HAL_GPIO_Init+0x2e0>)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cd8:	4b38      	ldr	r3, [pc, #224]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	4937      	ldr	r1, [pc, #220]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ce6:	4b35      	ldr	r3, [pc, #212]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	4933      	ldr	r1, [pc, #204]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d00:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	492d      	ldr	r1, [pc, #180]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60cb      	str	r3, [r1, #12]
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d0e:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4929      	ldr	r1, [pc, #164]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	4923      	ldr	r1, [pc, #140]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	491f      	ldr	r1, [pc, #124]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4919      	ldr	r1, [pc, #100]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	4915      	ldr	r1, [pc, #84]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	3301      	adds	r3, #1
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f47f aeaf 	bne.w	8001ae0 <HAL_GPIO_Init+0x14>
  }
}
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	372c      	adds	r7, #44	; 0x2c
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	10320000 	.word	0x10320000
 8001d94:	10310000 	.word	0x10310000
 8001d98:	10220000 	.word	0x10220000
 8001d9c:	10210000 	.word	0x10210000
 8001da0:	10120000 	.word	0x10120000
 8001da4:	10110000 	.word	0x10110000
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40010000 	.word	0x40010000
 8001db0:	40010800 	.word	0x40010800
 8001db4:	40010c00 	.word	0x40010c00
 8001db8:	40011000 	.word	0x40011000
 8001dbc:	40010400 	.word	0x40010400

08001dc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	e001      	b.n	8001de2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	807b      	strh	r3, [r7, #2]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dfe:	787b      	ldrb	r3, [r7, #1]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e04:	887a      	ldrh	r2, [r7, #2]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e0a:	e003      	b.n	8001e14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	041a      	lsls	r2, r3, #16
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	611a      	str	r2, [r3, #16]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b085      	sub	sp, #20
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e30:	887a      	ldrh	r2, [r7, #2]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4013      	ands	r3, r2
 8001e36:	041a      	lsls	r2, r3, #16
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	400b      	ands	r3, r1
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	611a      	str	r2, [r3, #16]
}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e26c      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8087 	beq.w	8001f7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e70:	4b92      	ldr	r3, [pc, #584]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d00c      	beq.n	8001e96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e7c:	4b8f      	ldr	r3, [pc, #572]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d112      	bne.n	8001eae <HAL_RCC_OscConfig+0x5e>
 8001e88:	4b8c      	ldr	r3, [pc, #560]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d10b      	bne.n	8001eae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e96:	4b89      	ldr	r3, [pc, #548]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d06c      	beq.n	8001f7c <HAL_RCC_OscConfig+0x12c>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d168      	bne.n	8001f7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e246      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x76>
 8001eb8:	4b80      	ldr	r3, [pc, #512]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a7f      	ldr	r2, [pc, #508]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	e02e      	b.n	8001f24 <HAL_RCC_OscConfig+0xd4>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x98>
 8001ece:	4b7b      	ldr	r3, [pc, #492]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a7a      	ldr	r2, [pc, #488]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b78      	ldr	r3, [pc, #480]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a77      	ldr	r2, [pc, #476]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e01d      	b.n	8001f24 <HAL_RCC_OscConfig+0xd4>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0xbc>
 8001ef2:	4b72      	ldr	r3, [pc, #456]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a71      	ldr	r2, [pc, #452]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b6f      	ldr	r3, [pc, #444]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6e      	ldr	r2, [pc, #440]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0xd4>
 8001f0c:	4b6b      	ldr	r3, [pc, #428]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a6a      	ldr	r2, [pc, #424]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b68      	ldr	r3, [pc, #416]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a67      	ldr	r2, [pc, #412]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fcb6 	bl	800189c <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff fcb2 	bl	800189c <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1fa      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0xe4>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fca2 	bl	800189c <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff fc9e 	bl	800189c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1e6      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x10c>
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d063      	beq.n	8002052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f8a:	4b4c      	ldr	r3, [pc, #304]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f96:	4b49      	ldr	r3, [pc, #292]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d11c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x18c>
 8001fa2:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d116      	bne.n	8001fdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x176>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e1ba      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4939      	ldr	r1, [pc, #228]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	e03a      	b.n	8002052 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe4:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7ff fc57 	bl	800189c <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fc53 	bl	800189c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e19b      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4927      	ldr	r1, [pc, #156]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
 8002024:	e015      	b.n	8002052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <HAL_RCC_OscConfig+0x270>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff fc36 	bl	800189c <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002034:	f7ff fc32 	bl	800189c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e17a      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d03a      	beq.n	80020d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d019      	beq.n	800209a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002066:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_RCC_OscConfig+0x274>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7ff fc16 	bl	800189c <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002074:	f7ff fc12 	bl	800189c <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e15a      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002092:	2001      	movs	r0, #1
 8002094:	f000 fa9a 	bl	80025cc <RCC_Delay>
 8002098:	e01c      	b.n	80020d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_RCC_OscConfig+0x274>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a0:	f7ff fbfc 	bl	800189c <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a6:	e00f      	b.n	80020c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff fbf8 	bl	800189c <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d908      	bls.n	80020c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e140      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	42420000 	.word	0x42420000
 80020c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	4b9e      	ldr	r3, [pc, #632]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1e9      	bne.n	80020a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80a6 	beq.w	800222e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e6:	4b97      	ldr	r3, [pc, #604]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10d      	bne.n	800210e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	4b94      	ldr	r3, [pc, #592]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a93      	ldr	r2, [pc, #588]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	61d3      	str	r3, [r2, #28]
 80020fe:	4b91      	ldr	r3, [pc, #580]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210e:	4b8e      	ldr	r3, [pc, #568]	; (8002348 <HAL_RCC_OscConfig+0x4f8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211a:	4b8b      	ldr	r3, [pc, #556]	; (8002348 <HAL_RCC_OscConfig+0x4f8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a8a      	ldr	r2, [pc, #552]	; (8002348 <HAL_RCC_OscConfig+0x4f8>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7ff fbb9 	bl	800189c <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7ff fbb5 	bl	800189c <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b64      	cmp	r3, #100	; 0x64
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0fd      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b81      	ldr	r3, [pc, #516]	; (8002348 <HAL_RCC_OscConfig+0x4f8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x312>
 8002154:	4b7b      	ldr	r3, [pc, #492]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a7a      	ldr	r2, [pc, #488]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6213      	str	r3, [r2, #32]
 8002160:	e02d      	b.n	80021be <HAL_RCC_OscConfig+0x36e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x334>
 800216a:	4b76      	ldr	r3, [pc, #472]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a75      	ldr	r2, [pc, #468]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6213      	str	r3, [r2, #32]
 8002176:	4b73      	ldr	r3, [pc, #460]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a72      	ldr	r2, [pc, #456]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	6213      	str	r3, [r2, #32]
 8002182:	e01c      	b.n	80021be <HAL_RCC_OscConfig+0x36e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b05      	cmp	r3, #5
 800218a:	d10c      	bne.n	80021a6 <HAL_RCC_OscConfig+0x356>
 800218c:	4b6d      	ldr	r3, [pc, #436]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a6c      	ldr	r2, [pc, #432]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	6213      	str	r3, [r2, #32]
 8002198:	4b6a      	ldr	r3, [pc, #424]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a69      	ldr	r2, [pc, #420]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6213      	str	r3, [r2, #32]
 80021a4:	e00b      	b.n	80021be <HAL_RCC_OscConfig+0x36e>
 80021a6:	4b67      	ldr	r3, [pc, #412]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a66      	ldr	r2, [pc, #408]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	4b64      	ldr	r3, [pc, #400]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4a63      	ldr	r2, [pc, #396]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d015      	beq.n	80021f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7ff fb69 	bl	800189c <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7ff fb65 	bl	800189c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0ab      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	4b57      	ldr	r3, [pc, #348]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0ee      	beq.n	80021ce <HAL_RCC_OscConfig+0x37e>
 80021f0:	e014      	b.n	800221c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f2:	f7ff fb53 	bl	800189c <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7ff fb4f 	bl	800189c <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e095      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	4b4c      	ldr	r3, [pc, #304]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ee      	bne.n	80021fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d105      	bne.n	800222e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002222:	4b48      	ldr	r3, [pc, #288]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	4a47      	ldr	r2, [pc, #284]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8081 	beq.w	800233a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002238:	4b42      	ldr	r3, [pc, #264]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d061      	beq.n	8002308 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d146      	bne.n	80022da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224c:	4b3f      	ldr	r3, [pc, #252]	; (800234c <HAL_RCC_OscConfig+0x4fc>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7ff fb23 	bl	800189c <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff fb1f 	bl	800189c <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e067      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226c:	4b35      	ldr	r3, [pc, #212]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002280:	d108      	bne.n	8002294 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002282:	4b30      	ldr	r3, [pc, #192]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	492d      	ldr	r1, [pc, #180]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a19      	ldr	r1, [r3, #32]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	430b      	orrs	r3, r1
 80022a6:	4927      	ldr	r1, [pc, #156]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <HAL_RCC_OscConfig+0x4fc>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7ff faf3 	bl	800189c <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ba:	f7ff faef 	bl	800189c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e037      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x46a>
 80022d8:	e02f      	b.n	800233a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <HAL_RCC_OscConfig+0x4fc>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff fadc 	bl	800189c <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e8:	f7ff fad8 	bl	800189c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e020      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x498>
 8002306:	e018      	b.n	800233a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e013      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	429a      	cmp	r2, r3
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002332:	429a      	cmp	r2, r3
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	40007000 	.word	0x40007000
 800234c:	42420060 	.word	0x42420060

08002350 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0d0      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002364:	4b6a      	ldr	r3, [pc, #424]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d910      	bls.n	8002394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b67      	ldr	r3, [pc, #412]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 0207 	bic.w	r2, r3, #7
 800237a:	4965      	ldr	r1, [pc, #404]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b63      	ldr	r3, [pc, #396]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0b8      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ac:	4b59      	ldr	r3, [pc, #356]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	494d      	ldr	r1, [pc, #308]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d040      	beq.n	8002470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d115      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e073      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e06b      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f023 0203 	bic.w	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4936      	ldr	r1, [pc, #216]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002440:	f7ff fa2c 	bl	800189c <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	e00a      	b.n	800245e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002448:	f7ff fa28 	bl	800189c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	; 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e053      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 020c 	and.w	r2, r3, #12
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	429a      	cmp	r2, r3
 800246e:	d1eb      	bne.n	8002448 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d210      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 0207 	bic.w	r2, r3, #7
 8002486:	4922      	ldr	r1, [pc, #136]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e032      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4916      	ldr	r1, [pc, #88]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	490e      	ldr	r1, [pc, #56]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024de:	f000 f821 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024e2:	4602      	mov	r2, r0
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	490a      	ldr	r1, [pc, #40]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024f0:	5ccb      	ldrb	r3, [r1, r3]
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1cc>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1d0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f98a 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40022000 	.word	0x40022000
 8002514:	40021000 	.word	0x40021000
 8002518:	08002e30 	.word	0x08002e30
 800251c:	20000084 	.word	0x20000084
 8002520:	20000088 	.word	0x20000088

08002524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b04      	cmp	r3, #4
 800254c:	d002      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x30>
 800254e:	2b08      	cmp	r3, #8
 8002550:	d003      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x36>
 8002552:	e027      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002556:	613b      	str	r3, [r7, #16]
      break;
 8002558:	e027      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	0c9b      	lsrs	r3, r3, #18
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	4a17      	ldr	r2, [pc, #92]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002564:	5cd3      	ldrb	r3, [r2, r3]
 8002566:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d010      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	0c5b      	lsrs	r3, r3, #17
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	4a11      	ldr	r2, [pc, #68]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002586:	fb02 f203 	mul.w	r2, r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	e004      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a0c      	ldr	r2, [pc, #48]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002598:	fb02 f303 	mul.w	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	613b      	str	r3, [r7, #16]
      break;
 80025a2:	e002      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetSysClockFreq+0x98>)
 80025a6:	613b      	str	r3, [r7, #16]
      break;
 80025a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025aa:	693b      	ldr	r3, [r7, #16]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	007a1200 	.word	0x007a1200
 80025c0:	08002e40 	.word	0x08002e40
 80025c4:	08002e50 	.word	0x08002e50
 80025c8:	003d0900 	.word	0x003d0900

080025cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025d4:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <RCC_Delay+0x34>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <RCC_Delay+0x38>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0a5b      	lsrs	r3, r3, #9
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025e8:	bf00      	nop
  }
  while (Delay --);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1e5a      	subs	r2, r3, #1
 80025ee:	60fa      	str	r2, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f9      	bne.n	80025e8 <RCC_Delay+0x1c>
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	20000084 	.word	0x20000084
 8002604:	10624dd3 	.word	0x10624dd3

08002608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e041      	b.n	800269e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe ff6e 	bl	8001510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3304      	adds	r3, #4
 8002644:	4619      	mov	r1, r3
 8002646:	4610      	mov	r0, r2
 8002648:	f000 fa56 	bl	8002af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d001      	beq.n	80026c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e035      	b.n	800272c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a16      	ldr	r2, [pc, #88]	; (8002738 <HAL_TIM_Base_Start_IT+0x90>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d009      	beq.n	80026f6 <HAL_TIM_Base_Start_IT+0x4e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ea:	d004      	beq.n	80026f6 <HAL_TIM_Base_Start_IT+0x4e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a12      	ldr	r2, [pc, #72]	; (800273c <HAL_TIM_Base_Start_IT+0x94>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d111      	bne.n	800271a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2b06      	cmp	r3, #6
 8002706:	d010      	beq.n	800272a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002718:	e007      	b.n	800272a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40012c00 	.word	0x40012c00
 800273c:	40000400 	.word	0x40000400

08002740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d020      	beq.n	80027a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01b      	beq.n	80027a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0202 	mvn.w	r2, #2
 8002774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f998 	bl	8002ac0 <HAL_TIM_IC_CaptureCallback>
 8002790:	e005      	b.n	800279e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f98b 	bl	8002aae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f99a 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d020      	beq.n	80027f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01b      	beq.n	80027f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0204 	mvn.w	r2, #4
 80027c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2202      	movs	r2, #2
 80027c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f972 	bl	8002ac0 <HAL_TIM_IC_CaptureCallback>
 80027dc:	e005      	b.n	80027ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f965 	bl	8002aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f974 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d020      	beq.n	800283c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01b      	beq.n	800283c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0208 	mvn.w	r2, #8
 800280c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2204      	movs	r2, #4
 8002812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f94c 	bl	8002ac0 <HAL_TIM_IC_CaptureCallback>
 8002828:	e005      	b.n	8002836 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f93f 	bl	8002aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f94e 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	d020      	beq.n	8002888 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01b      	beq.n	8002888 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0210 	mvn.w	r2, #16
 8002858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2208      	movs	r2, #8
 800285e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f926 	bl	8002ac0 <HAL_TIM_IC_CaptureCallback>
 8002874:	e005      	b.n	8002882 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f919 	bl	8002aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f928 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00c      	beq.n	80028ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0201 	mvn.w	r2, #1
 80028a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe fd66 	bl	8001378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00c      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fa6f 	bl	8002dae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00c      	beq.n	80028f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d007      	beq.n	80028f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f8f8 	bl	8002ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00c      	beq.n	8002918 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0220 	mvn.w	r2, #32
 8002910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fa42 	bl	8002d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002918:	bf00      	nop
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_TIM_ConfigClockSource+0x1c>
 8002938:	2302      	movs	r3, #2
 800293a:	e0b4      	b.n	8002aa6 <HAL_TIM_ConfigClockSource+0x186>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800295a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002974:	d03e      	beq.n	80029f4 <HAL_TIM_ConfigClockSource+0xd4>
 8002976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297a:	f200 8087 	bhi.w	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
 800297e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002982:	f000 8086 	beq.w	8002a92 <HAL_TIM_ConfigClockSource+0x172>
 8002986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298a:	d87f      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
 800298c:	2b70      	cmp	r3, #112	; 0x70
 800298e:	d01a      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0xa6>
 8002990:	2b70      	cmp	r3, #112	; 0x70
 8002992:	d87b      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
 8002994:	2b60      	cmp	r3, #96	; 0x60
 8002996:	d050      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x11a>
 8002998:	2b60      	cmp	r3, #96	; 0x60
 800299a:	d877      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
 800299c:	2b50      	cmp	r3, #80	; 0x50
 800299e:	d03c      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0xfa>
 80029a0:	2b50      	cmp	r3, #80	; 0x50
 80029a2:	d873      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
 80029a4:	2b40      	cmp	r3, #64	; 0x40
 80029a6:	d058      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0x13a>
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d86f      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
 80029ac:	2b30      	cmp	r3, #48	; 0x30
 80029ae:	d064      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x15a>
 80029b0:	2b30      	cmp	r3, #48	; 0x30
 80029b2:	d86b      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d060      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x15a>
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d867      	bhi.n	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d05c      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x15a>
 80029c0:	2b10      	cmp	r3, #16
 80029c2:	d05a      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x15a>
 80029c4:	e062      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6899      	ldr	r1, [r3, #8]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f000 f96a 	bl	8002cae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	609a      	str	r2, [r3, #8]
      break;
 80029f2:	e04f      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6899      	ldr	r1, [r3, #8]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f000 f953 	bl	8002cae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a16:	609a      	str	r2, [r3, #8]
      break;
 8002a18:	e03c      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	461a      	mov	r2, r3
 8002a28:	f000 f8ca 	bl	8002bc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2150      	movs	r1, #80	; 0x50
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f921 	bl	8002c7a <TIM_ITRx_SetConfig>
      break;
 8002a38:	e02c      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6859      	ldr	r1, [r3, #4]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	461a      	mov	r2, r3
 8002a48:	f000 f8e8 	bl	8002c1c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2160      	movs	r1, #96	; 0x60
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f911 	bl	8002c7a <TIM_ITRx_SetConfig>
      break;
 8002a58:	e01c      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6859      	ldr	r1, [r3, #4]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f000 f8aa 	bl	8002bc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2140      	movs	r1, #64	; 0x40
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f901 	bl	8002c7a <TIM_ITRx_SetConfig>
      break;
 8002a78:	e00c      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f000 f8f8 	bl	8002c7a <TIM_ITRx_SetConfig>
      break;
 8002a8a:	e003      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a90:	e000      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
	...

08002af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a2b      	ldr	r2, [pc, #172]	; (8002bb8 <TIM_Base_SetConfig+0xc0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d007      	beq.n	8002b20 <TIM_Base_SetConfig+0x28>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b16:	d003      	beq.n	8002b20 <TIM_Base_SetConfig+0x28>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a28      	ldr	r2, [pc, #160]	; (8002bbc <TIM_Base_SetConfig+0xc4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d108      	bne.n	8002b32 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a20      	ldr	r2, [pc, #128]	; (8002bb8 <TIM_Base_SetConfig+0xc0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d007      	beq.n	8002b4a <TIM_Base_SetConfig+0x52>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b40:	d003      	beq.n	8002b4a <TIM_Base_SetConfig+0x52>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <TIM_Base_SetConfig+0xc4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d108      	bne.n	8002b5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a0d      	ldr	r2, [pc, #52]	; (8002bb8 <TIM_Base_SetConfig+0xc0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d103      	bne.n	8002b90 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f023 0201 	bic.w	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	611a      	str	r2, [r3, #16]
  }
}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	40012c00 	.word	0x40012c00
 8002bbc:	40000400 	.word	0x40000400

08002bc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	f023 0201 	bic.w	r2, r3, #1
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f023 030a 	bic.w	r3, r3, #10
 8002bfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	621a      	str	r2, [r3, #32]
}
 8002c12:	bf00      	nop
 8002c14:	371c      	adds	r7, #28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	f023 0210 	bic.w	r2, r3, #16
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	031b      	lsls	r3, r3, #12
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	621a      	str	r2, [r3, #32]
}
 8002c70:	bf00      	nop
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f043 0307 	orr.w	r3, r3, #7
 8002c9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	609a      	str	r2, [r3, #8]
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b087      	sub	sp, #28
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	021a      	lsls	r2, r3, #8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	609a      	str	r2, [r3, #8]
}
 8002ce2:	bf00      	nop
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e041      	b.n	8002d88 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d009      	beq.n	8002d5c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d50:	d004      	beq.n	8002d5c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a10      	ldr	r2, [pc, #64]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d10c      	bne.n	8002d76 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	40000400 	.word	0x40000400

08002d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <__libc_init_array>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	2600      	movs	r6, #0
 8002dc4:	4d0c      	ldr	r5, [pc, #48]	; (8002df8 <__libc_init_array+0x38>)
 8002dc6:	4c0d      	ldr	r4, [pc, #52]	; (8002dfc <__libc_init_array+0x3c>)
 8002dc8:	1b64      	subs	r4, r4, r5
 8002dca:	10a4      	asrs	r4, r4, #2
 8002dcc:	42a6      	cmp	r6, r4
 8002dce:	d109      	bne.n	8002de4 <__libc_init_array+0x24>
 8002dd0:	f000 f822 	bl	8002e18 <_init>
 8002dd4:	2600      	movs	r6, #0
 8002dd6:	4d0a      	ldr	r5, [pc, #40]	; (8002e00 <__libc_init_array+0x40>)
 8002dd8:	4c0a      	ldr	r4, [pc, #40]	; (8002e04 <__libc_init_array+0x44>)
 8002dda:	1b64      	subs	r4, r4, r5
 8002ddc:	10a4      	asrs	r4, r4, #2
 8002dde:	42a6      	cmp	r6, r4
 8002de0:	d105      	bne.n	8002dee <__libc_init_array+0x2e>
 8002de2:	bd70      	pop	{r4, r5, r6, pc}
 8002de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de8:	4798      	blx	r3
 8002dea:	3601      	adds	r6, #1
 8002dec:	e7ee      	b.n	8002dcc <__libc_init_array+0xc>
 8002dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df2:	4798      	blx	r3
 8002df4:	3601      	adds	r6, #1
 8002df6:	e7f2      	b.n	8002dde <__libc_init_array+0x1e>
 8002df8:	08002e54 	.word	0x08002e54
 8002dfc:	08002e54 	.word	0x08002e54
 8002e00:	08002e54 	.word	0x08002e54
 8002e04:	08002e58 	.word	0x08002e58

08002e08 <memset>:
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4402      	add	r2, r0
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d100      	bne.n	8002e12 <memset+0xa>
 8002e10:	4770      	bx	lr
 8002e12:	f803 1b01 	strb.w	r1, [r3], #1
 8002e16:	e7f9      	b.n	8002e0c <memset+0x4>

08002e18 <_init>:
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1a:	bf00      	nop
 8002e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1e:	bc08      	pop	{r3}
 8002e20:	469e      	mov	lr, r3
 8002e22:	4770      	bx	lr

08002e24 <_fini>:
 8002e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e26:	bf00      	nop
 8002e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2a:	bc08      	pop	{r3}
 8002e2c:	469e      	mov	lr, r3
 8002e2e:	4770      	bx	lr
